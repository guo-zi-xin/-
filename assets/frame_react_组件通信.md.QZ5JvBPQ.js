import{_ as o}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.DG_r4eBb.js";import{_ as l,c as e,j as n,a as p,G as t,a6 as c,o as r}from"./chunks/framework.D7D3iUXQ.js";import"./chunks/theme.DDTcEUIz.js";const f=JSON.parse('{"title":"React 组件间的通信","description":"","frontmatter":{},"headers":[],"relativePath":"frame/react/组件通信.md","filePath":"frame/react/组件通信.md","lastUpdated":1708859917000}'),F={name:"frame/react/组件通信.md"};function D(y,s,i,d,A,B){const a=o;return r(),e("div",null,[s[0]||(s[0]=n("h1",{id:"react-组件间的通信",tabindex:"-1"},[p("React 组件间的通信 "),n("a",{class:"header-anchor",href:"#react-组件间的通信","aria-label":'Permalink to "React 组件间的通信"'},"​")],-1)),t(a,{readTime:"1",words:"250"}),s[1]||(s[1]=c(`<h3 id="父组件调用子组件" tabindex="-1">父组件调用子组件 <a class="header-anchor" href="#父组件调用子组件" aria-label="Permalink to &quot;父组件调用子组件&quot;">​</a></h3><p>⽗组件调⽤⼦组件⽅法 使⽤<code>useImperativeHandle</code>调⽤⼦组件⽅法。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useImperativeHandle</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useRef</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * ⼦组件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> ChildrenComponent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">props</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setCount</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;"> useImperativeHandle</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">props</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">childrenRef</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">  handleClick</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> setCount</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">c</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> c</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  handleDelete</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;">setCount</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">c</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;">c</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> c</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> :</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;"> }</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"> return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">count </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;"> )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * ⽗组件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> App</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> childrenRef</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useRef</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"> return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;"> &lt;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;"> &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;"> = {()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> childrenRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">handleClick</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">}&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;"> = {()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> childrenRef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">current</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">handleDelete</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">}&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">ChildrenComponent</span><span style="color:#C792EA;"> childrenRef</span><span style="color:#89DDFF;"> = {</span><span style="color:#BABED8;">childrenRef</span><span style="color:#89DDFF;">}/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;"> &lt;/&gt;</span></span>
<span class="line"><span style="color:#F07178;"> )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> App</span></span></code></pre></div><p>父组件与子组件的加载顺序</p><div class="danger custom-block"><p class="custom-block-title">加载顺序</p><ul><li>父子组件初始化</li></ul><p>父组件 <code>constructor</code> 父组件 <code>getDerivedStateFromProps</code> 父组件 <code>render</code> 子组件 <code>constructor</code> 子组件 <code>getDerivedStateFromProps</code> 子组件 <code>render</code> 子组件 <code>componentDidMount</code> 父组件 <code>componentDidMount</code></p><ul><li>子组件修改自身state</li></ul><p>子组件 <code>getDeriverStateFromProps</code> 子组件 <code>shouldComponentUpdate</code> 子组件 <code>render</code> 子组件 <code>getSnapShotBeforeUpdate</code> 子组件 <code>componentDidUpdate</code></p><ul><li>父组件修改props</li></ul><p>父组件 <code>getDerivedStateFromProps</code> 父组件 <code>shouldComponentUpdate</code> 父组件 <code>render</code> 子组件 <code>getDerivedStateFromProps</code> 子组件 <code>shouleComponentUpdate</code> 子组件 <code>render</code> 子组件 <code>getSnapShotBeforeUpdate</code> 子组件 <code>getSnapShotBeforeUpdate</code> 子组件 <code>componentDidUpdate</code> 父组件 <code>conponentDidUpdate</code></p><ul><li>卸载子组件</li></ul><p>父组件 getDerivedStateFromProps 父组件 shouldComponentUpdate 父组件 render 父组件 getSnapShotBeforeUpdate 子组件 componentWillUnmount 父组件 componentDidUpdate</p></div>`,5))])}const C=l(F,[["render",D]]);export{f as __pageData,C as default};
