import{_ as p}from"./chunks/CustomLink.CogLOo7d.js";import{_ as r}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.Co43k6IT.js";import{_ as i,c as s,j as t,a as e,G as d,a6 as m,o as u}from"./chunks/framework.D7D3iUXQ.js";import"./chunks/theme.BzyCvZRr.js";const A=JSON.parse('{"title":"Node 简介","description":"","frontmatter":{},"headers":[],"relativePath":"native/node/node简介.md","filePath":"native/node/node简介.md","lastUpdated":1711372342000}'),a={name:"native/node/node简介.md"};function g(N,o,f,b,k,v){const l=r,n=p;return u(),s("div",null,[o[25]||(o[25]=t("h1",{id:"node-简介",tabindex:"-1"},[e("Node 简介 "),t("a",{class:"header-anchor",href:"#node-简介","aria-label":'Permalink to "Node 简介"'},"​")],-1)),d(l,{readTime:"4",words:"1.2k"}),t("p",null,[o[0]||(o[0]=t("code",null,"Node.js",-1)),o[1]||(o[1]=e(" 是一个基于 ")),o[2]||(o[2]=t("code",null,"Chrome V8 引擎",-1)),o[3]||(o[3]=e("的 ")),d(n,{title:"JavaScript",href:"https://baike.baidu.com/item/JavaScript/321142"}),o[4]||(o[4]=e(" 运行环境。"))]),t("p",null,[o[5]||(o[5]=t("code",null,"Node",-1)),o[6]||(o[6]=e(" 是一个让 ")),o[7]||(o[7]=t("code",null,"JavaScript",-1)),o[8]||(o[8]=e(" 运行在")),d(n,{title:"服务端",href:"https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E7%AB%AF/6492316"}),o[9]||(o[9]=e("的开发平台, 发布于2009年5月，由Ryan Dahl开发，实质是对")),o[10]||(o[10]=t("code",null,"Chrome V8引擎",-1)),o[11]||(o[11]=e("进行了封装。"))]),t("p",null,[o[12]||(o[12]=t("code",null,"Node",-1)),o[13]||(o[13]=e("对一些特殊用例进行优化，提供替代的")),d(n,{title:"API",href:"https://baike.baidu.com/item/API/10154"}),o[14]||(o[14]=e("，使得")),o[15]||(o[15]=t("code",null,"V8",-1)),o[16]||(o[16]=e("在非浏览器环境下运行得更好。")),o[17]||(o[17]=t("code",null,"V8引擎",-1)),o[18]||(o[18]=e("执行")),o[19]||(o[19]=t("code",null,"Javascript",-1)),o[20]||(o[20]=e("的速度非常快，性能非常好。"))]),o[26]||(o[26]=t("p",null,[t("code",null,"Node"),e("是一个基于"),t("code",null,"Chrome JavaScript"),e("运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。")],-1)),t("p",null,[o[21]||(o[21]=t("code",null,"Node",-1)),o[22]||(o[22]=e(" 使用")),d(n,{title:"事件驱动",href:"https://baike.baidu.com/item/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/9597519"}),o[23]||(o[23]=e("， 非阻塞")),d(n,{title:"I/O",href:"https://baike.baidu.com/item/I%2FO/84718"}),o[24]||(o[24]=e(" 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。"))]),o[27]||(o[27]=m('<p>在理解<code>Node</code>之前 先明确几个概念:</p><ul><li><p><strong>终端</strong></p><p>终端指的是设备终端终端设备，是计算机网络中处于网络最外围的设备，主要用于用户信息的输入以及处理结果的输出等;</p></li><li><p><strong>客户端</strong></p><p>客户端与服务段对应, 又称为用户端, 为用户提供本地服务的程序,用来接收来自服务端的数据或者资源, 也可以理解为软件;</p></li><li><p><strong>服务端</strong></p><p>为客户端提供服务, 例如 <em><code>数据资源</code></em> 运行服务器的终端叫服务器;</p><p>JS是一门脚本语言 脚本语言需要一个解析器, 在客户端,浏览器的JS引擎充当了JS的解析器;</p><p>而在服务端, <code>Node</code>充当了解析器</p><p>解析器其实是一个运行环境, 在客户端, 解析器提供了操作<code>dom</code>, <code>bom</code>的接口,而在<code>Node</code>中解析器提供了操作磁盘和文件的接口.</p></li></ul><h2 id="node特点" tabindex="-1">Node特点 <a class="header-anchor" href="#node特点" aria-label="Permalink to &quot;Node特点&quot;">​</a></h2><ul><li><p><strong>1.非阻塞I/O</strong></p><p>在单线程当中,当一段代码运行需要很长时间的时候,, 比如 一个没有终止的递归或者一个没有结束条件的循环, 后面的代码处于等待状态, 在浏览器端的表现也就是常常说的浏览器假死;而在<code>Node</code>中,采用了非阻塞I/O的机制, 就是说当一个请求所返回的数据需要很长时间, 那么会把这段请求代码放在回调函数中, 当主线程的任务执行完成时, 再去读取放在任务队列的请求的数据, 通过不同地轮询(<em><code>Event Loop</code></em>) 直到数据正常返回, 再去处理数据, 从而提升了执行效率。</p></li><li><p><strong>2.事件驱动</strong></p></li></ul><p>事件驱动的编程思想主要是通过事件或者状态变化来进行应用程序的流程控制, 一般通过事件驱动来完成. 一旦事件被监测到 则调用响应的回调函数; 简单来说, 就是当异步任务执行的时候 会被放置到任务队列中, 主线程任务完毕后 会读取任务队列中的事件, 因为任务队列中的每一个异步任务执行完毕后都会在队列中添加一个事件 而js而js主线程执行完后就会执行这些事件，从而调起对应的回调函数放入主线程中进行执行</p><ul><li><p><strong>3.单线程</strong></p><p>在<code>Java</code>或<code>PHP</code>中，会为每一个客户端链接创建一个线程，而每个线程需要大约<strong>2MB</strong>的内存，在一个<strong>8GB</strong>的服务器上，大约能同时为4000左右的用户服务，而<code>Node</code>通过非阻塞I/O、事件驱动机制,可以同时处理超过4万的用户连接，缺点就是一个用户造成的线程奔溃会让整个服务器都崩溃，其它用户也会崩溃；</p><p>单线程在同一时刻只能执行一个任务，也就是说，执行环境相对更简单，更高效，但是在单线程中I/O设备对其来说是致命的，因为I/O是阻塞形式的，然而nodeJS中，将异步数据放在任务队列中执行，从而不阻塞主线程任务的执行，当异步任务执行完毕后，在任务队列添加事件，等待执行，从而提高了效率。</p><blockquote><p>单线程也就是同一时刻只能做同一件事情</p></blockquote></li><li><p><strong>4.跨平台</strong></p><p><code>Node</code>是服务端的，基于chrome的V8引擎，是<code>JavaScript</code>的运行环境，因此没有运行的限制，与浏览器没有任何关系，并不会因为IE而产生兼容问题等。</p></li></ul>',6))])}const E=i(a,[["render",g]]);export{A as __pageData,E as default};
