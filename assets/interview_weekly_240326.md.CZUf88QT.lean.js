import{_ as o}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.QrrBmjNq.js";import{_ as l,c as n,j as e,a as t,G as r,a6 as c,o as i}from"./chunks/framework.8Xbk4tT3.js";import"./chunks/theme.VasyDUoe.js";const F=JSON.parse('{"title":"240326 面试","description":"","frontmatter":{},"headers":[],"relativePath":"interview/weekly/240326.md","filePath":"interview/weekly/240326.md","lastUpdated":1731426020000}'),h={name:"interview/weekly/240326.md"};function p(d,a,u,b,m,D){const s=o;return i(),n("div",null,[a[0]||(a[0]=e("h1",{id:"_240326-面试",tabindex:"-1"},[t("240326 面试 "),e("a",{class:"header-anchor",href:"#_240326-面试","aria-label":'Permalink to "240326 面试"'},"​")],-1)),r(s,{readTime:"1",words:"375"}),a[1]||(a[1]=c(`<h2 id="_15-00-线下" tabindex="-1">15:00 线下 <a class="header-anchor" href="#_15-00-线下" aria-label="Permalink to &quot;15:00 线下&quot;">​</a></h2><h3 id="页面从url到渲染完成发生了什么" tabindex="-1">页面从url到渲染完成发生了什么 <a class="header-anchor" href="#页面从url到渲染完成发生了什么" aria-label="Permalink to &quot;页面从url到渲染完成发生了什么&quot;">​</a></h3><h3 id="什么是强缓存-什么是协商缓存" tabindex="-1">什么是强缓存 什么是协商缓存 <a class="header-anchor" href="#什么是强缓存-什么是协商缓存" aria-label="Permalink to &quot;什么是强缓存 什么是协商缓存&quot;">​</a></h3><p>强缓存是</p><h3 id="dns解析的是什么" tabindex="-1">DNS解析的是什么 <a class="header-anchor" href="#dns解析的是什么" aria-label="Permalink to &quot;DNS解析的是什么&quot;">​</a></h3><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h3><h3 id="react常用的hook" tabindex="-1">React常用的Hook <a class="header-anchor" href="#react常用的hook" aria-label="Permalink to &quot;React常用的Hook&quot;">​</a></h3><h3 id="useeffect的副作用指的是什么" tabindex="-1">useEffect的副作用指的是什么 <a class="header-anchor" href="#useeffect的副作用指的是什么" aria-label="Permalink to &quot;useEffect的副作用指的是什么&quot;">​</a></h3><h3 id="重绘和重排" tabindex="-1">重绘和重排 <a class="header-anchor" href="#重绘和重排" aria-label="Permalink to &quot;重绘和重排&quot;">​</a></h3><h3 id="防抖和节流-实现一个防抖函数" tabindex="-1">防抖和节流 实现一个防抖函数 <a class="header-anchor" href="#防抖和节流-实现一个防抖函数" aria-label="Permalink to &quot;防抖和节流 实现一个防抖函数&quot;">​</a></h3><h3 id="dns是去哪里获取ip呢" tabindex="-1">DNS是去哪里获取IP呢 <a class="header-anchor" href="#dns是去哪里获取ip呢" aria-label="Permalink to &quot;DNS是去哪里获取IP呢&quot;">​</a></h3><h3 id="cookie和-storage区别" tabindex="-1">cookie和 storage区别 <a class="header-anchor" href="#cookie和-storage区别" aria-label="Permalink to &quot;cookie和 storage区别&quot;">​</a></h3><h3 id="假如上线遇到一个bug-在命中缓存之前发生-我们应该去执行什么操作让它获取到最新更新呢" tabindex="-1">假如上线遇到一个bug 在命中缓存之前发生， 我们应该去执行什么操作让它获取到最新更新呢 <a class="header-anchor" href="#假如上线遇到一个bug-在命中缓存之前发生-我们应该去执行什么操作让它获取到最新更新呢" aria-label="Permalink to &quot;假如上线遇到一个bug 在命中缓存之前发生， 我们应该去执行什么操作让它获取到最新更新呢&quot;">​</a></h3><h2 id="_20-00-线上" tabindex="-1">20:00 线上 <a class="header-anchor" href="#_20-00-线上" aria-label="Permalink to &quot;20:00 线上&quot;">​</a></h2><h3 id="react简介和它的优点" tabindex="-1">React简介和它的优点 <a class="header-anchor" href="#react简介和它的优点" aria-label="Permalink to &quot;React简介和它的优点&quot;">​</a></h3><h3 id="常用的hooks" tabindex="-1">常用的Hooks <a class="header-anchor" href="#常用的hooks" aria-label="Permalink to &quot;常用的Hooks&quot;">​</a></h3><h3 id="react组件间通信方式" tabindex="-1">React组件间通信方式 <a class="header-anchor" href="#react组件间通信方式" aria-label="Permalink to &quot;React组件间通信方式&quot;">​</a></h3><h3 id="如何实现一个两边盒子固定-中间自适应的布局" tabindex="-1">如何实现一个两边盒子固定 中间自适应的布局 <a class="header-anchor" href="#如何实现一个两边盒子固定-中间自适应的布局" aria-label="Permalink to &quot;如何实现一个两边盒子固定 中间自适应的布局&quot;">​</a></h3><h3 id="如何实现盒子垂直居中" tabindex="-1">如何实现盒子垂直居中 <a class="header-anchor" href="#如何实现盒子垂直居中" aria-label="Permalink to &quot;如何实现盒子垂直居中&quot;">​</a></h3><h3 id="js常用的数组方法-哪些改变了原数组-哪些没有改变" tabindex="-1">JS常用的数组方法 哪些改变了原数组 哪些没有改变 <a class="header-anchor" href="#js常用的数组方法-哪些改变了原数组-哪些没有改变" aria-label="Permalink to &quot;JS常用的数组方法 哪些改变了原数组 哪些没有改变&quot;">​</a></h3><h3 id="es6新语法有哪些" tabindex="-1">ES6新语法有哪些 <a class="header-anchor" href="#es6新语法有哪些" aria-label="Permalink to &quot;ES6新语法有哪些&quot;">​</a></h3><h3 id="reduce的方法" tabindex="-1">reduce的方法 <a class="header-anchor" href="#reduce的方法" aria-label="Permalink to &quot;reduce的方法&quot;">​</a></h3><h3 id="什么是闭包-它的功能是什么" tabindex="-1">什么是闭包 它的功能是什么 <a class="header-anchor" href="#什么是闭包-它的功能是什么" aria-label="Permalink to &quot;什么是闭包 它的功能是什么&quot;">​</a></h3><h3 id="redux是什么" tabindex="-1">Redux是什么 <a class="header-anchor" href="#redux是什么" aria-label="Permalink to &quot;Redux是什么&quot;">​</a></h3><h3 id="如何实现一个两个已经排序的数组合并后还是排序好的数组" tabindex="-1">如何实现一个两个已经排序的数组合并后还是排序好的数组 <a class="header-anchor" href="#如何实现一个两个已经排序的数组合并后还是排序好的数组" aria-label="Permalink to &quot;如何实现一个两个已经排序的数组合并后还是排序好的数组&quot;">​</a></h3><h3 id="js中如何进行数组排序" tabindex="-1">JS中如何进行数组排序 <a class="header-anchor" href="#js中如何进行数组排序" aria-label="Permalink to &quot;JS中如何进行数组排序&quot;">​</a></h3><h3 id="输入-num-1234567890-输出-num-1-234-567-890" tabindex="-1">输入 num = &#39;1234567890&#39; 输出 num = &#39;1,234,567,890&#39; <a class="header-anchor" href="#输入-num-1234567890-输出-num-1-234-567-890" aria-label="Permalink to &quot;输入 num = &#39;1234567890&#39; 输出 num = &#39;1,234,567,890&#39;&quot;">​</a></h3><ul><li><code>toLocaleString</code>方法</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1234567890</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> formattedNum </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> num</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 将数字格式化为带有千位分隔符的字符串</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(formattedNum)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 输出：&#39;1,234,567,890&#39;</span></span></code></pre></div><ul><li>通过<code>replace</code>方法</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1234567890</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> formattedNum </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> num</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">\\B</span><span style="color:#89DDFF;">(?=(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{3})+(?!</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">))/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(formattedNum)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 输出：&#39;1,234,567,890&#39;</span></span></code></pre></div><h3 id="js的事件循环机制" tabindex="-1">JS的事件循环机制 <a class="header-anchor" href="#js的事件循环机制" aria-label="Permalink to &quot;JS的事件循环机制&quot;">​</a></h3><h3 id="什么是原型链" tabindex="-1">什么是原型链 <a class="header-anchor" href="#什么是原型链" aria-label="Permalink to &quot;什么是原型链&quot;">​</a></h3><h3 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h3><h3 id="判断基本数据类型的方法" tabindex="-1">判断基本数据类型的方法 <a class="header-anchor" href="#判断基本数据类型的方法" aria-label="Permalink to &quot;判断基本数据类型的方法&quot;">​</a></h3><h3 id="instanceof原理" tabindex="-1">instanceof原理 <a class="header-anchor" href="#instanceof原理" aria-label="Permalink to &quot;instanceof原理&quot;">​</a></h3>`,36))])}const k=l(h,[["render",p]]);export{F as __pageData,k as default};
