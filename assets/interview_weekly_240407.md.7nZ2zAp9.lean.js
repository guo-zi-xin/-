import{_ as l}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.ahzV38-K.js";import{_ as p,c as o,j as n,a as e,G as t,a6 as c,o as r}from"./chunks/framework.D7D3iUXQ.js";import"./chunks/theme._-NuN2Vt.js";const F="/web-docs/svg/grid%E5%B8%83%E5%B1%80.svg",D="/web-docs/image/grid%E8%A1%8C%E5%88%97.png",y="/web-docs/image/grid%E7%BD%91%E6%A0%BC%E7%BA%BF.png",i="/web-docs/image/grid%E5%9B%BA%E5%AE%9A%E8%A1%8C%E5%88%97%E5%AE%BD%E9%AB%98.png",d="/web-docs/image/grid-auto-fill.png",C="/web-docs/image/grid-fr.png",B="/web-docs/image/grid-minmax.png",g="/web-docs/image/grid-auto.png",u="/web-docs/image/grid%E9%97%B4%E8%B7%9D.png",m="/web-docs/image/grid-area.png",E="/web-docs/image/grid%E5%85%88%E8%A1%8C%E5%90%8E%E5%88%97.png",A="/web-docs/image/grid%E5%85%88%E8%A1%8C%E5%90%8E%E5%88%97dense.png",f="/web-docs/image/grid%E5%85%88%E5%88%97%E5%90%8E%E8%A1%8C.png",h="/web-docs/image/grid-justify-start.png",b="/web-docs/image/grid-justify-end.png",x="/web-docs/image/grid-justify-center.png",w="/web-docs/image/grid-justify-stretch.png",v="/web-docs/image/grid-content-start.png",q="/web-docs/image/grid-content-end.png",k="/web-docs/image/grid-content-center.png",_="/web-docs/image/grid-content-around.png",j="/web-docs/image/grid-content-between.png",P="/web-docs/image/grid-content-evenly.png",N="/web-docs/image/grid-content-stretch.png",$="/web-docs/image/grid-auto-gap.png",S="/web-docs/image/grid-auto-rows.png",T="/web-docs/image/grid-self-start.png",R="/web-docs/image/grid-self-end.png",z="/web-docs/image/grid-self-center.png",O="/web-docs/image/grid-self-stretch.png",K=JSON.parse('{"title":"2024-04-07 React","description":"","frontmatter":{},"headers":[],"relativePath":"interview/weekly/240407.md","filePath":"interview/weekly/240407.md","lastUpdated":1731426020000}'),M={name:"interview/weekly/240407.md"};function G(I,s,V,J,U,H){const a=l;return r(),o("div",null,[s[0]||(s[0]=n("h1",{id:"_2024-04-07-react",tabindex:"-1"},[e("2024-04-07 React "),n("a",{class:"header-anchor",href:"#_2024-04-07-react","aria-label":'Permalink to "2024-04-07 React"'},"​")],-1)),t(a,{readTime:"20",words:"5.4k"}),s[1]||(s[1]=c(`<h3 id="null-和-undefined-的区别" tabindex="-1">null 和 undefined 的区别 <a class="header-anchor" href="#null-和-undefined-的区别" aria-label="Permalink to &quot;null 和 undefined 的区别&quot;">​</a></h3><h4 id="undefined-未定义" tabindex="-1">undefined(未定义) <a class="header-anchor" href="#undefined-未定义" aria-label="Permalink to &quot;undefined(未定义)&quot;">​</a></h4><ul><li><p>在javascript中， <code>undefined</code>表示一个变量已经被声明了，但尚未被赋值，或者一个不存在的属性</p></li><li><p>当访问一个未初始化的变量时，该变量的值为<code>undefined</code></p></li><li><p>当函数没有返回值时，默认返回<code>undefined</code></p></li><li><p>使用<code>typeof</code>操作符检测一个未声明的变量或者一个值为<code>undefined</code>的变量， 返回值也是<code>undefined</code></p></li></ul><h4 id="null-空值" tabindex="-1">null(空值) <a class="header-anchor" href="#null-空值" aria-label="Permalink to &quot;null(空值)&quot;">​</a></h4><ul><li><p><code>null</code>表示一个变量被明确地赋值为一个空值，表示&quot;无&quot;、&quot;空&quot;或者&quot;不存在&quot;</p></li><li><p>在代码中， 开发者有时会显式地将变量设置为<code>null</code>，以表示这个变量的值为空</p></li><li><p>使用<code>typeof</code>操作符检测一个值为<code>null</code>的变量， 返回值是<code>object</code>,</p></li></ul><p>总的来说， <code>undefined</code>表示未定义或未初始化的变量， 而<code>null</code>表示一个空值或者不存在的对象，在实际应用中，通常会将变量初始化为 null 来表示空值，而不是使用 undefined。</p><h3 id="联合类型和交叉类型的区别" tabindex="-1">联合类型和交叉类型的区别 <a class="header-anchor" href="#联合类型和交叉类型的区别" aria-label="Permalink to &quot;联合类型和交叉类型的区别&quot;">​</a></h3><h4 id="交叉类型" tabindex="-1">交叉类型 <code>&amp;</code> <a class="header-anchor" href="#交叉类型" aria-label="Permalink to &quot;交叉类型 \`&amp;\`&quot;">​</a></h4><p>交叉类型是将多个类型合并为同一个类型，这样可以把现有的类型叠加到一起成为一种类型， 它包含了所需的所有类型的特性， 但不适用于基本数据类型， 会产生一个新的<code>never</code>类型</p><h4 id="联合类型" tabindex="-1">联合类型 <code>|</code> <a class="header-anchor" href="#联合类型" aria-label="Permalink to &quot;联合类型 \`|\`&quot;">​</a></h4><p>联合类型与交叉类型很有关联，但使用上完全不同， 联合类型会产生一个包含所有类型选择集的类型，表示一个值的类型是定义的联合类型中的其中一种。</p><p>当一个变量希望传入某种类型时， 可以考虑使用联合类型</p><p>当一个值是联合类型对象时，我们只能访问这个联合类型中所有类型中的共同成员</p><h3 id="实现千分号分隔符功能" tabindex="-1">实现千分号分隔符功能 <a class="header-anchor" href="#实现千分号分隔符功能" aria-label="Permalink to &quot;实现千分号分隔符功能&quot;">​</a></h3><ul><li><strong>使用 <code>toLocalString</code>方法</strong></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1234567890</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> formattedNumber</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> num</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLocaleString</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 使用默认的语言环境设置</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(formattedNumber)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 输出 &quot;1,234,567,890&quot;</span></span></code></pre></div><ul><li><strong>使用数组分割方法</strong></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1234567890</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> formatNumber </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 转换为字符串，并按照小数点拆分成数组 分为整数部分和小数部分</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> String</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 将整数部分拆分</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> intNumber</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arr</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 小数部分</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> fraction</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arr</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 返回的变量</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#BABED8;">  intNumber</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reverse</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> index</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 非第一位并且是下标是3的倍数， 添加&#39;,&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;"> !==</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> index</span><span style="color:#89DDFF;"> %</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      result</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> \`\${</span><span style="color:#BABED8;">item</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      //正常添加字符</span></span>
<span class="line"><span style="color:#BABED8;">      result</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> item</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> result</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 整数部分和小数部分拼接</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> \`\${</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">}\${</span><span style="color:#89DDFF;">!!</span><span style="color:#BABED8;">fraction </span><span style="color:#89DDFF;">?</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">fraction</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;&#39;}\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#82AAFF;">formatNumber</span><span style="color:#BABED8;">(num))</span></span></code></pre></div><ul><li><strong>使用字符串截取的方式</strong></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1234567890</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> formatNumber </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 转换为字符串，并按照小数点拆分成数组 分为整数部分和小数部分</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> String</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 将整数部分拆分</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> intNumber</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arr</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 小数部分</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> fraction</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arr</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 多余的位数</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> extracts</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> intNumber</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> %</span><span style="color:#F78C6C;"> 3</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 获取多余的位数， f可能是0，即result可能是空字符串</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> intNumber</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> extracts</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 每三位添加&#39;,&#39;金额对应的字符</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">intNumber</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> /</span><span style="color:#F78C6C;"> 3</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    result</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">intNumber</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#BABED8;">(extracts </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> extracts </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> (i </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //多余的位数， 上面</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">extracts</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    result</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //整数部分和小数部分拼接</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> \`\${</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">}\${</span><span style="color:#89DDFF;">!!</span><span style="color:#BABED8;">fraction </span><span style="color:#89DDFF;">?</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">fraction</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;&#39;}\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#82AAFF;">formatNumber</span><span style="color:#BABED8;">(num))</span></span></code></pre></div><ul><li><strong>求模法</strong></li></ul><p>按照 用1000求模取末尾3位，然后用除法判断是否还有剩余位数, 性能比较好</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1234567890</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> formatNumber </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> num</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> temp</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  do</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //求模的值， 用于获取高三位，这里可能有小数</span></span>
<span class="line"><span style="color:#BABED8;">    mod</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;"> %</span><span style="color:#F78C6C;"> 1000</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //判断值是不是大于1， 是继续的条件</span></span>
<span class="line"><span style="color:#BABED8;">    nums</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> nums</span><span style="color:#89DDFF;"> /</span><span style="color:#F78C6C;"> 1000</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 高三位</span></span>
<span class="line"><span style="color:#BABED8;">    temp</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ~~</span><span style="color:#BABED8;">mod</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 1. 填充： num &gt; 1 循环未结束， 就要填充为三位数 比如 1 需要填充为001</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 不然temp = ~~mod的时候， 1 001, 就会变成 &#39;11&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 2. 拼接&#39;,&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#BABED8;">    result</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;"> ?</span><span style="color:#89DDFF;"> \`\${</span><span style="color:#BABED8;">temp</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">padStart</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> temp</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!!</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;"> ?</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">nums</span><span style="color:#89DDFF;"> &gt;=</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> strNumber</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> String</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">num</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> index</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> strNumber</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //拼接小数部分</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">index</span><span style="color:#89DDFF;"> &gt;=</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      result</span><span style="color:#89DDFF;"> +=</span><span style="color:#BABED8;"> strNumber</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subString</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">index</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> result</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#82AAFF;">formatNumber</span><span style="color:#BABED8;">(num))</span></span></code></pre></div><ul><li><strong>正则表达式(先行断言)</strong></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> formatNumber </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">num</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">string</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> !</span><span style="color:#82AAFF;">String</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果匹配到了1-3位数字， 后面一定要匹配3位</span></span>
<span class="line"><span style="color:#82AAFF;">  String</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{1,3}(?=(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{3})+</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">)/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">march</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;font-style:italic;"> return</span><span style="color:#89DDFF;"> \`\${</span><span style="color:#BABED8;">match</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  :</span></span>
<span class="line"><span style="color:#82AAFF;">  String</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{1,3}(?=(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{3})+(</span><span style="color:#BABED8;">\\.</span><span style="color:#89DDFF;">))/</span><span style="color:#F78C6C;">g</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">match</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;font-style:italic;"> return</span><span style="color:#89DDFF;"> \`\${</span><span style="color:#BABED8;">match</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;"> }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">formatNumber</span><span style="color:#BABED8;">(num)</span></span></code></pre></div><h3 id="虚拟滚动-最终到底部后-所有的节点都被push进去-那么此时上拉的时候会不会卡顿" tabindex="-1">虚拟滚动 最终到底部后，所有的节点都被push进去， 那么此时上拉的时候会不会卡顿 <a class="header-anchor" href="#虚拟滚动-最终到底部后-所有的节点都被push进去-那么此时上拉的时候会不会卡顿" aria-label="Permalink to &quot;虚拟滚动 最终到底部后，所有的节点都被push进去， 那么此时上拉的时候会不会卡顿&quot;">​</a></h3><p>会卡顿</p><h3 id="react有哪些性能优化" tabindex="-1">React有哪些性能优化 <a class="header-anchor" href="#react有哪些性能优化" aria-label="Permalink to &quot;React有哪些性能优化&quot;">​</a></h3><h3 id="react-memo" tabindex="-1">React.memo <a class="header-anchor" href="#react-memo" aria-label="Permalink to &quot;React.memo&quot;">​</a></h3><p><code>React.memo</code>是react中用于性能优化的高阶组件(HOC),它类似于类组件中的 <code>shouldComponentUpdate</code> 方法，用于在函数组件中实现组件的浅比较（shallow comparison），以确定是否重新渲染组件。</p><p>当函数组件的 props 发生变化时，React 会重新调用组件函数来计算新的 JSX 结构。但在某些情况下，组件的 props 可能并不会影响到组件的 UI 渲染结果，此时重新渲染组件是没有必要的，会造成性能浪费。</p><p>React.memo 就是为了解决这个问题而提供的。它接收一个函数组件，并返回一个新的组件，这个新的组件会记住之前渲染的结果，当 props 发生变化时，它会进行浅比较，如果 props 没有发生变化，则不会重新渲染组件，而是直接使用之前的渲染结果，从而提升性能。</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个普通的函数组件</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> MyComponent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#BABED8;">props</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用 React.memo 包裹函数组件，实现性能优化</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> MemoizedComponent </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">memo</span><span style="color:#BABED8;">(MyComponent)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在其它地方使用 MemoizedComponent</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> App </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">MemoizedComponent</span><span style="color:#C792EA;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> App</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="var-a-n-1-var-b-a-a-x-a-n-2-console-log-a-x-console-log-b-x-分别打印什么" tabindex="-1">var a = { n: 1 } var b = a a.x = a = { n: 2 } console.log(a.x) console.log(b.x) 分别打印什么 <a class="header-anchor" href="#var-a-n-1-var-b-a-a-x-a-n-2-console-log-a-x-console-log-b-x-分别打印什么" aria-label="Permalink to &quot;var a = { n: 1 } var b = a a.x = a = { n: 2 } console.log(a.x) console.log(b.x) 分别打印什么&quot;">​</a></h3><p>分别打印<code>undefined</code>和 <code>{n: 2}</code></p><ul><li>分析</li></ul><p>这段代码涉及到 JavaScript 中变量引用和赋值的机制，需要分析每一步的操作：</p><ol><li><code>var a = {n:1}</code>：创建一个对象 <code>{n: 1}</code> 并将其赋给变量 <code>a</code>。</li><li><code>var b = a</code>：将变量 <code>a</code> 的引用赋给变量 <code>b</code>，即 <code>b</code> 指向 <code>{n: 1}</code> 这个对象。</li><li><code>a.x = a = {n: 2}</code>： <ul><li><code>a.x</code>：在对象 <code>{n: 1}</code> 上创建一个属性 <code>x</code>，但此时 <code>a</code> 仍指向 <code>{n: 1}</code>，因此相当于为 <code>{n: 1}</code> 对象添加了属性 <code>x</code>，所以此时 <code>{n: 1, x: [Circular]}</code>。</li><li><code>a = {n: 2}</code>：将变量 <code>a</code> 的引用指向新创建的对象 <code>{n: 2}</code>。但由于之前 <code>a.x</code> 已经被赋值为 <code>{n: 1}</code>，所以此时 <code>{n: 1}</code> 对象的 <code>x</code> 属性值不变。</li></ul></li><li><code>console.log(a.x)</code>：输出 <code>undefined</code>，因为现在 <code>a</code> 已经指向了 <code>{n: 2}</code>，而 <code>{n: 2}</code> 并没有 <code>x</code> 属性。</li><li><code>console.log(b.x)</code>：输出 <code>{n: 1}</code>，因为 <code>b</code> 仍然指向最初的对象 <code>{n: 1}</code>，而此时该对象已经被添加了属性 <code>x</code>，因此输出 <code>{n: 1}</code>。</li></ol><p>综上所述，最终输出结果是：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;"> n</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;"> }</span></span></code></pre></div><h3 id="for-var-i-0-i-3-i-settimeout-function-console-log-i-输出结果是什么-有什么好的优化方式" tabindex="-1">for (var i = 0; i &lt; 3; i++) { setTimeout(function() { console.log(i)})} 输出结果是什么，有什么好的优化方式 <a class="header-anchor" href="#for-var-i-0-i-3-i-settimeout-function-console-log-i-输出结果是什么-有什么好的优化方式" aria-label="Permalink to &quot;for (var i = 0; i &lt; 3; i++) { setTimeout(function() { console.log(i)})} 输出结果是什么，有什么好的优化方式&quot;">​</a></h3><p>打印结果为三次3。 这是因为 setTimeout 函数是异步执行的，当循环结束后，i 的值已经变成了 3。而在每个 setTimeout 回调函数中，都是在循环结束后才触发执行的，所以它们都会打印出最终的 i 值，即 3。</p><p>要解决这个问题，可以使用闭包来创建一个函数作用域，并在每次迭代时保留 i 的值。可以通过将 setTimeout 回调函数封装在一个立即调用的函数表达式(IIFE)中来实现</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">i</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)(</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>另一种优化方式是使用 let 关键字来声明循环变量 i，let 会创建一个块级作用域，使得每次循环迭代时都会创建一个新的 i 变量</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">  setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="网格布局" tabindex="-1">网格布局 <a class="header-anchor" href="#网格布局" aria-label="Permalink to &quot;网格布局&quot;">​</a></h3><p>网格布局是一种基于网络的二维布局系统，旨在完全改变我们设计基于网格的用户界面的方式。</p><h4 id="容器属性" tabindex="-1">容器属性 <a class="header-anchor" href="#容器属性" aria-label="Permalink to &quot;容器属性&quot;">​</a></h4><ul><li>示例</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wrapper</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">one item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">One</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">two item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Two</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">three item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Three</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">four item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Four</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">five item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Five</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">six item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Six</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  margin</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 60px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 声明一个容器 */</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*  声明列的宽度  */</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> repeat</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 200px</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*  声明行间距和列间距  */</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*  声明行的高度  */</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100px</span><span style="color:#F78C6C;"> 200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">one</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">19CAAD</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">two</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">8CC7B5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">three</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">D1BA74</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">four</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">BEE7E9</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">five</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">E6CEAC</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">six</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">ECAD9E</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  text-align</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  font-size</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 200%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">fff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><img src="`+F+'" alt="Grid布局"><p>**容器和项目：**我们通过在元素上声明 display：grid 或 display：inline-grid 来创建一个网格容器。一旦我们这样做，这个元素的所有直系子元素将成为网格项目。比如上面 .wrapper 所在的元素为一个网格容器，其直系子元素将成为网格项目。 网格轨道：grid-template-columns 和 grid-template-rows 属性来定义网格中的行和列。容器内部的水平区域称为行，垂直区域称为列。上图中 One、Two、Three 组成了一行，One、Four 则是一列</p><img src="'+D+'" alt="行列"><p><strong>网格单元：</strong> 一个网格单元是在一个网格元素中最小的单位， 从概念上来讲其实它和表格的一个单元格很像。上图中 One、Two、Three、Four...都是一个个的网格单元 网格线：划分网格的线，称为&quot;网格线&quot;。应该注意的是，当我们定义网格时，我们定义的是网格轨道，而不是网格线。Grid 会为我们创建编号的网格线来让我们来定位每一个网格元素。m 列有 m + 1 根垂直的网格线，n 行有 n + 1 跟水平网格线。</p><p>比如上图示例中就有 4 根垂直网格线。一般而言，是从左到右，从上到下，1，2，3 进行编号排序。当然也可以从右到左，从下到上，按照 -1，-2，-3...顺序进行编号排序</p><img src="'+y+`" alt="网格线"><h5 id="display属性" tabindex="-1">display属性 <a class="header-anchor" href="#display属性" aria-label="Permalink to &quot;display属性&quot;">​</a></h5><p><code>display:grid</code>声明的是一个块级元素</p><p><code>display:inline-grid</code>声明的是一个行内元素</p><h5 id="grid-template-columns-属性和-grid-template-rows-属性-设置行列宽高" tabindex="-1">grid-template-columns 属性和 grid-template-rows 属性（设置行列宽高） <a class="header-anchor" href="#grid-template-columns-属性和-grid-template-rows-属性-设置行列宽高" aria-label="Permalink to &quot;grid-template-columns 属性和 grid-template-rows 属性（设置行列宽高）&quot;">​</a></h5><p><code>grid-template-columns</code> 属性设置列宽</p><p><code>grid-template-rows</code> 属性设置行高</p><ul><li>固定的列宽和行高</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 声明了三列，宽度分别为200px 100px 200px */</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 200px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#F78C6C;"> 200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /* 声明了两行，行高分别为50px 50px */</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#F78C6C;"> 50px</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><img src="`+i+`" alt="固定的列宽与行高"><ul><li>repeat() 函数</li></ul><p>可以简化重复的值。该函数接受两个参数，第一个参数是重复的次数，第二个参数是所要重复的值。比如上面行高都是一样的，我们可以这么去实现，实际效果是一模一样的</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-1</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 200px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#F78C6C;"> 200px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*  2行，而且行高都为 50px  */</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-rows</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> repeat</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><strong>auto-fill 关键字</strong></li></ul><p>表示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格。grid-template-columns: repeat(auto-fill, 200px) 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-2</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> repeat</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">auto-fill</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 200px</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><img src="`+d+'" alt="auto-fill关键字"><ul><li><strong>fr关键字</strong></li></ul><p>Grid 布局还引入了一个另外的长度单位来帮助我们创建灵活的网格轨道。<code>fr</code>单位代表网格容器中可用空间的一等份。</p><p><code>grid-template-columns: 200px 1fr 2fr</code> 表示第一个列宽设置为 <code>200px</code>，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 <code>1/3</code> 和 <code>2/3</code>。</p><img src="'+C+`" alt="fr关键字"><ul><li><strong>minmax() 函数</strong></li></ul><p>我们有时候想给网格元素一个最小和最大的尺寸，minmax() 函数产生一个长度范围，表示长度就在这个范围之中都可以应用到网格项目中。它接受两个参数，分别为最小值和最大值。</p><p><code>grid-template-columns: 1fr 1fr minmax(300px, 2fr)</code> 的意思是，第三个列宽最少也是要 300px，但是最大不能大于第一第二列宽的两倍。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-4</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1fr</span><span style="color:#F78C6C;"> 1fr</span><span style="color:#82AAFF;"> minmax</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">300px</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2fr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><img src="`+B+`" alt="minmax函数"><ul><li><strong>auto关键字</strong></li></ul><p>由浏览器决定长度。通过 auto 关键字，我们可以轻易实现三列或者两列布局。</p><p><code>grid-template-columns: 100px auto 100px</code> 表示第一第三列为 100px，中间由浏览器决定长度</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-5</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100px</span><span style="color:#BABED8;"> auto </span><span style="color:#F78C6C;">100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><img src="`+g+`" alt="auto关键字"><h5 id="grid-row-gap-属性、grid-column-gap-属性以及-grid-gap-属性-设置间距" tabindex="-1">grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性（设置间距） <a class="header-anchor" href="#grid-row-gap-属性、grid-column-gap-属性以及-grid-gap-属性-设置间距" aria-label="Permalink to &quot;grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性（设置间距）&quot;">​</a></h5><p><code>grid-row-gap</code>: 设置行间距</p><p><code>grid-column-gap</code>: 设置列间距</p><p><code>grid-gap</code>:<code>grid-row-gap</code>和<code>grid-column-gap</code>的简写形式</p><p><code>grid-row-gap: 10px</code> 表示行间距是 10px，<code>grid-column-gap: 20px</code> 表示列间距是 20px。<code>grid-gap: 10px 20px</code> 实现的效果是一样的</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 200px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10px</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-1</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 200px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-row-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><img src="`+u+`" alt="grid间距"><h5 id="grid-template-areas-属性-定义区域" tabindex="-1">grid-template-areas 属性（定义区域） <a class="header-anchor" href="#grid-template-areas-属性-定义区域" aria-label="Permalink to &quot;grid-template-areas 属性（定义区域）&quot;">​</a></h5><p><code>grid-template-areas</code> 属性用于定义区域，一个区域由一个或者多个单元格组成</p><p>一般这个属性跟网格元素的<code>grid-area</code>一起使用, <code>grid-area</code> 属性指定项目放在哪一个区域</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 120px</span><span style="color:#F78C6C;">  120px</span><span style="color:#F78C6C;">  120px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-areas</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">. header  header</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">sidebar content content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  background-color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">fff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">444</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面代码表示划分出 6 个单元格，其中值得注意的是 . 符号代表空的单元格，也就是没有用到该单元格。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">sidebar</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-area</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> sidebar</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-area</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> content</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">header</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-area</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> header</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>以上代码表示将类 <code>.sidebar</code> <code>.content</code> <code>.header</code>所在的元素放在上面 <code>grid-template-areas</code> 中定义的<code>sidebar</code> <code>content</code> <code>header</code>区域中</p><img src="`+m+`" alt="grid-template-area属性"><h5 id="grid-auto-flow-属性-设置排列先后顺序" tabindex="-1">grid-auto-flow 属性（设置排列先后顺序） <a class="header-anchor" href="#grid-auto-flow-属性-设置排列先后顺序" aria-label="Permalink to &quot;grid-auto-flow 属性（设置排列先后顺序）&quot;">​</a></h5><p><code>grid-auto-flow</code>属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。默认的放置顺序是&quot;先行后列&quot;，即先填满第一行，再开始放入第二行，即下图英文数字的顺序 one,two,three...。</p><p>这个顺序由 <code>grid-auto-flow</code> 属性决定，默认值是 <code>row</code>。</p><ul><li><strong>先行后列</strong></li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100px</span><span style="color:#F78C6C;"> 200px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-flow</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> row</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>第五个项目和第六个项目之间有个空白（如下图所示），这个是由于第六块的长度大于了空白处的长度，被挤到了下一行导致的</p><img src="`+E+`" alt="先行后列"><ul><li><strong>先行后列dense</strong></li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-2</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100px</span><span style="color:#F78C6C;"> 200px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-flow</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> row dense</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>我们可能想让下面长度合适的填满这个空白，这个时候可以设置 <code>grid-auto-flow: row dense</code>，表示尽可能填满表格。</p><img src="`+A+`" alt="先行后列紧凑型"><ul><li><strong>先列后行</strong></li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-1</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-flow</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> column</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">  50px</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>可以设置 <code>grid-auto-flow: column</code>，表示先列后行</p><img src="`+f+`" alt="先列后行"><h5 id="justify-items-属性、align-items-属性-单元格位置设置" tabindex="-1">justify-items 属性、align-items 属性（单元格位置设置） <a class="header-anchor" href="#justify-items-属性、align-items-属性-单元格位置设置" aria-label="Permalink to &quot;justify-items 属性、align-items 属性（单元格位置设置）&quot;">​</a></h5><p><code>justify-items</code> 属性设置单元格内容的水平位置（左中右）</p><p><code>align-items</code> 属性设置单元格的垂直位置（上中下）</p><p>它们都有如下属性</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">.container {</span></span>
<span class="line"><span style="color:#BABED8;">  justify</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">items: </span><span style="color:#F78C6C;">start</span><span style="color:#BABED8;"> | </span><span style="color:#F78C6C;">end</span><span style="color:#BABED8;"> | center | stretch;</span></span>
<span class="line"><span style="color:#BABED8;">  align</span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;">items: </span><span style="color:#F78C6C;">start</span><span style="color:#BABED8;"> | </span><span style="color:#F78C6C;">end</span><span style="color:#BABED8;"> | center | stretch;</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre></div><p>代码效果如下：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> .</span><span style="color:#FFCB6B;">wrapper-1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> .</span><span style="color:#FFCB6B;">wrapper-2</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> .</span><span style="color:#FFCB6B;">wrapper-3</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100px</span><span style="color:#F78C6C;"> 200px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-items</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> start</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-1</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-items</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> end</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-2</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-items</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-3</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-items</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> stretch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><strong>start</strong> 对其单元格起始边缘</li></ul><img src="`+h+'" alt="start"><ul><li><strong>end</strong> 对其单元格结束边缘</li></ul><img src="'+b+'" alt="end"><ul><li><strong>center</strong> 对其单元格内部居中</li></ul><img src="'+x+'" alt="center"><ul><li><strong>stretch</strong> 默认值， 拉伸 占满单元格整个宽度</li></ul><img src="'+w+`" alt="stretch"><h5 id="justify-content-属性、align-content-属性-内容区域位置设置" tabindex="-1">justify-content 属性、align-content 属性(内容区域位置设置) <a class="header-anchor" href="#justify-content-属性、align-content-属性-内容区域位置设置" aria-label="Permalink to &quot;justify-content 属性、align-content 属性(内容区域位置设置)&quot;">​</a></h5><p><code>justify-content</code> 属性是整个内容区域在容器里面的水平位置（左中右）</p><p><code>align-content</code> 属性是整个内容区域的垂直位置（上中下）</p><p>它们都有如下的属性值</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-content</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> start | end | center | stretch | space-around | space-between | space-evenly</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  align-content</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> start | end | center | stretch | space-around | space-between | space-evenly</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> .</span><span style="color:#FFCB6B;">wrapper-1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> .</span><span style="color:#FFCB6B;">wrapper-2</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> .</span><span style="color:#FFCB6B;">wrapper-3</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> .</span><span style="color:#FFCB6B;">wrapper-4</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> .</span><span style="color:#FFCB6B;">wrapper-5</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> .</span><span style="color:#FFCB6B;">wrapper-6</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100px</span><span style="color:#F78C6C;"> 200px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-content</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> start</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-1</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-content</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> end</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper-2</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-content</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><strong>start 对齐容器的起始边框</strong></li></ul><img src="`+v+'" alt="justify-content:start"><ul><li><strong>end 对齐容器的结束边框</strong></li></ul><img src="'+q+'" alt="justify-content:end"><ul><li><strong>center 容器内部居中</strong></li></ul><img src="'+k+'" alt="justify-content:center"><ul><li><strong>space-around 每个项目两侧的间隔相等</strong></li></ul><img src="'+_+'" alt="justify-content:space-around"><ul><li><strong>space-between 项目与项目的间隔相等,项目与容器边框之间没有间隔</strong></li></ul><img src="'+j+'" alt="justify-content:space-between"><ul><li><strong>space-evenly 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔</strong></li></ul><img src="'+P+'" alt="justify-content:space-evenly "><ul><li><strong>stretch 项目大小没有指定时，拉伸占据整个网格容器</strong></li></ul><img src="'+N+`" alt="justify-content:stretch "><h5 id="grid-auto-columns-属性和-grid-auto-rows-属性" tabindex="-1">grid-auto-columns 属性和 grid-auto-rows 属性 <a class="header-anchor" href="#grid-auto-columns-属性和-grid-auto-rows-属性" aria-label="Permalink to &quot;grid-auto-columns 属性和 grid-auto-rows 属性&quot;">​</a></h5><div class="info custom-block"><p class="custom-block-title">隐式网格</p><p><strong>隐式和显示网格</strong> 显式网格包含了在<code>grid-template-columns</code>和<code>grid-template-rows</code>属性中定义的行和列。</p><p>如果在网格定义之外又放了一些东西，或者因为内容的数量而需要的更多网格轨道的时候，网格将会在隐式网格中创建行和列。</p><p>假如有多余的网格（也就是上面提到的隐式网格），那么它的行高和列宽可以根据 <code>grid-auto-columns</code>属性和<code>grid-auto-rows</code>属性设置。</p><p>它们的写法和<code>grid-template-columns</code>和<code>grid-template-rows</code>完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</p></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 200px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*  只设置了两行，但实际的数量会超出两行，超出的行高会以 grid-auto-rows 算 */</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100px</span><span style="color:#F78C6C;"> 100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10px</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>grid-template-columns</code>属性和<code>grid-template-rows</code>属性只是指定了两行两列，但实际有九个元素，就会产生隐式网格。</p><p>通过<code>grid-auto-rows</code>可以指定隐式网格的行高为<code>50px</code></p><img src="`+$+`" alt="显式网格与隐式网格"><h4 id="项目属性" tabindex="-1">项目属性 <a class="header-anchor" href="#项目属性" aria-label="Permalink to &quot;项目属性&quot;">​</a></h4><h5 id="grid-column-start-属性、grid-column-end-属性、grid-row-start-属性以及grid-row-end-属性-指定网格边框定位的网格线" tabindex="-1">grid-column-start 属性、grid-column-end 属性、grid-row-start 属性以及grid-row-end 属性（指定网格边框定位的网格线） <a class="header-anchor" href="#grid-column-start-属性、grid-column-end-属性、grid-row-start-属性以及grid-row-end-属性-指定网格边框定位的网格线" aria-label="Permalink to &quot;grid-column-start 属性、grid-column-end 属性、grid-row-start 属性以及grid-row-end 属性（指定网格边框定位的网格线）&quot;">​</a></h5><ul><li>可以指定网格项目所在的四个边框，分别定位在哪根网格线，从而指定项目的位置</li></ul><p><code>grid-column-start</code> 属性：左边框所在的垂直网格线</p><p><code>grid-column-end</code> 属性：右边框所在的垂直网格线</p><p><code>grid-row-start</code> 属性：上边框所在的水平网格线</p><p><code>grid-row-end</code> 属性：下边框所在的水平网格线</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">wrapper</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-template-columns</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> repeat</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1fr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-gap</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-auto-rows</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> minmax</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100px</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> auto</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">one</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-start</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">19CAAD</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">two</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-start</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-row-start</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-row-end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /*   如果有重叠，就使用 z-index */</span></span>
<span class="line"><span style="color:#B2CCD6;">  z-index</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">8CC7B5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">three</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-start</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-row-start</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-row-end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">D1BA74</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">four</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-start</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-row-start</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-row-end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">BEE7E9</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">five</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-start</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column-end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-row-start</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-row-end</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">E6CEAC</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">six</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-column</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  grid-row</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  background</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">ECAD9E</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>面代码中，类<code>.two</code>所在的网格项目，垂直网格线是从 2 到 4，水平网格线是从 1 到 2。其中它跟<code>.three</code>（垂直网格线是从3 到 4，水平网格线是从 1 到 4） 是有冲突的。可以设置 z-index 去决定它们的层级关系</p><img src="`+S+`" alt="网格线位置"><h5 id="grid-area属性" tabindex="-1">grid-area属性 <a class="header-anchor" href="#grid-area属性" aria-label="Permalink to &quot;grid-area属性&quot;">​</a></h5><p><code>grid-area</code>: 指定项目放在哪一个区域， 常与<code>grid-template-areas</code>一起使用</p><h5 id="justify-self-属性、align-self-属性以及-place-self-属性-单个单元格的位置" tabindex="-1">justify-self 属性、align-self 属性以及 place-self 属性(单个单元格的位置) <a class="header-anchor" href="#justify-self-属性、align-self-属性以及-place-self-属性-单个单元格的位置" aria-label="Permalink to &quot;justify-self 属性、align-self 属性以及 place-self 属性(单个单元格的位置)&quot;">​</a></h5><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code>属性的用法完全一致，但只作用于单个项目</p><p><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟<code>align-items</code>属性的用法完全一致，也是只作用于单个项目</p><p>他们的属性值</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-self</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> start | end | center | stretch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  align-self</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> start | end | center | stretch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-self</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> start</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item-1</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-self</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> end</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item-2</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-self</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">item-3</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  justify-self</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> stretch</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><strong>start：对齐单元格的起始边缘</strong></li></ul><img src="`+T+'" alt="单元格起始边缘"><ul><li><strong>end：对齐单元格的结束边缘</strong></li></ul><img src="'+R+'" alt="单元格结束边缘"><ul><li><strong>center：单元格内部居中</strong></li></ul><img src="'+z+'" alt="单元格内部居中"><ul><li><strong>stretch：默认值 拉伸，占满单元格的整个宽度</strong></li></ul><img src="'+O+'" alt="占满单元格的整个宽度">',186))])}const Q=p(M,[["render",G]]);export{K as __pageData,Q as default};
