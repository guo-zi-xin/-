import{_ as l}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.QrrBmjNq.js";import{_ as p,c as o,j as n,a as e,G as t,a6 as c,o as r}from"./chunks/framework.8Xbk4tT3.js";import"./chunks/theme.VasyDUoe.js";const g=JSON.parse('{"title":"2024-11-11","description":"","frontmatter":{},"headers":[],"relativePath":"interview/weekly/241111.md","filePath":"interview/weekly/241111.md","lastUpdated":1731426161000}'),F={name:"interview/weekly/241111.md"};function D(y,s,i,B,d,C){const a=l;return r(),o("div",null,[s[0]||(s[0]=n("h1",{id:"_2024-11-11",tabindex:"-1"},[e("2024-11-11 "),n("a",{class:"header-anchor",href:"#_2024-11-11","aria-label":'Permalink to "2024-11-11"'},"​")],-1)),t(a,{readTime:"18",words:"4.9k"}),s[1]||(s[1]=c(`<h3 id="自我介绍" tabindex="-1">自我介绍 <a class="header-anchor" href="#自我介绍" aria-label="Permalink to &quot;自我介绍&quot;">​</a></h3><h3 id="react的react-memo和usememo的区别" tabindex="-1">React的React.memo和useMemo的区别 <a class="header-anchor" href="#react的react-memo和usememo的区别" aria-label="Permalink to &quot;React的React.memo和useMemo的区别&quot;">​</a></h3><p><code>React.memo</code>和 <code>useMemo</code>都是用于优化React应用性能的工具，但是他们的应用场景和使用方式有所不同。</p><ul><li><p><strong>React.memo</strong> 用途：</p><p><code>React.memo</code>是一个高阶组件(HOC)，主要用于优化React函数组件的性能。 当有一个组件，其输出仅依赖于<code>props</code>,而且在<code>props</code>不变时不需要重新渲染，就可以使用<code>React.memo</code>来包裹这个组件， 这样React会在每次渲染前比较新旧<code>props</code>，如果他们相等(浅比较)，则跳过不必要的渲染；</p></li></ul><p>使用方式：</p><p>直接将组件作为参数传递给<code>React.memo()</code>函数， 例如：<code>const memoComponent = React.memo(myComponent)</code>;</p><ul><li><strong>useMemo</strong> 用途：</li></ul><p><code>useMemo</code>是一个Hook， 用于优化React函数组件内部的计算。当有一个耗时的计算或者要创建一个复杂的对象，并且这个计算结果或者对象的依赖没有变化时，就可以使用<code>useMemo</code>来缓存该计算结果或者对象，避免在每次渲染时都重新计算。</p><p>使用方式：</p><p>在组件内部使用，接收两个参数，一个产生计算结果的函数和一个依赖数组。只有当依赖数组中的值发生改变时，传入的函数才会重新执行。 例如：<code>const computedValue = useMemo(()=&gt; expensiveCalculation(a, b), [a, b])</code></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>两者是否可以相互转换：</p><p>严格来说，<code>React.memo</code>和<code>useMemo</code>是不可以相互转换的，因为它们作用的层面不同， <code>React.memo</code>关注的是整个组件的渲染是否需要进行，<code>useMemo</code>则关注的是组件内部某个值的计算是否需要重新执行。 但是，你可以根据需要达到的优化目的，在合适的地方分别使用它们。例如：如果你发现一个组件因为<code>props</code>没有变化却重复频繁渲染，可以考虑使用<code>React.memo</code>来包裹这个组件。如果组件内部有某个复杂计算逻辑频繁执行且结果可以被缓存，那么应该使用<code>useMemo</code>来优化这个计算过程。</p></div><h3 id="react中usememo、usecallback的区别" tabindex="-1">React中useMemo、useCallback的区别 <a class="header-anchor" href="#react中usememo、usecallback的区别" aria-label="Permalink to &quot;React中useMemo、useCallback的区别&quot;">​</a></h3><ul><li><strong>useCallback</strong></li></ul><p><code>useCallback</code>是一个用于优化性能的React Hook，它的主要作用是避免在每次渲染的时候都重新创建函数。通过记住上一次创建的函数，只有在依赖项在发生变化时才重新创建新的函数，从而提高性能</p><p>接收两个参数：</p><ol><li>一个函数， 这个函数就是我们需要记住的函数</li><li>一个依赖项数组，当数组中的依赖项发生变化时，就会重新创建新的函数</li></ol><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useCallback</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> App</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setCount</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> handleClick</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useCallback</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">点击了按钮</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#82AAFF;">    setCount</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">count</span><span style="color:#F07178;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;">  (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">点击次数：</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">handleClick</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">增加</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> App</span></span></code></pre></div><p>在这个例子中，我们使用<code>useCallback</code>对<code>handleClick</code>函数进行了优化。 只有<code>count</code>变化时，<code>handleClick</code>函数才会被重新创建</p><ul><li><strong>useMemo</strong><code>useMemo</code>是一个用于优化性能的React Hook， 他的主要作用是避免在每次渲染时都进入复杂的计算和重新创建对象。通过记住上一次的计算结果，只有在依赖项发生变化的时候才重新计算，从而提高性能</li></ul><p>接收两个参数：</p><ol><li>一个函数，这个函数返回需要记住的值。</li><li>一个依赖数组，当数组中的依赖项发生变化时候，才会重新计算函数的返回值</li></ol><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useMemo</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> App</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setCount</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> expensiveCalculation</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useMemo</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">计算中</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> count</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 2</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#F07178;"> [</span><span style="color:#BABED8;">count</span><span style="color:#F07178;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">结果:</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">expensiveCalculation</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> {</span><span style="color:#82AAFF;"> setCount</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}}&gt;</span><span style="color:#BABED8;">增加</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> App</span></span></code></pre></div><p>在这个例子中， 我们使用<code>useMemo</code>对<code>count * 2</code> 这个计算进行了优化。只有当<code>count</code>变化时，<code>expensiveCalculation</code>的值才会重新计算</p><h3 id="react中常见的hooks" tabindex="-1">React中常见的Hooks <a class="header-anchor" href="#react中常见的hooks" aria-label="Permalink to &quot;React中常见的Hooks&quot;">​</a></h3><ul><li><p><strong>useState</strong></p><p>用于管理功能组件中的状态</p></li><li><p><strong>useEffect</strong></p><p>用于在功能组件中执行副作用，例如获取数据或订阅事件</p></li><li><p><strong>useContext</strong></p><p>用于访问功能组件中React 上下文的值</p></li><li><p><strong>useRef</strong></p><p>用于创建对跨渲染保留的元素或值的可变引用</p></li><li><p><strong>useCallback</strong></p><p>缓存回调函数，避免在每次渲染时都创建新的回调函数实例</p><p>当回调函数作为prop传递给子组件时，使用 useCallback可以确保子组件在依赖项未变化时不会因为接收到新的函数引起不必要的重新渲染。</p><p>在某些情况下，可以配合 useMemo 使用， 将计算逻辑和函数绑定在一起，从而在依赖项不变时只计算一次</p></li><li><p><strong>useMemo</strong></p><p>用于缓存计算值，类似于 useCallback，但是它缓存的是普通数值而不是回调函数</p></li><li><p><strong>useReducer</strong></p><p>用于使用reducer函数的管理状态，类似于Redux的工作方式</p></li><li><p><strong>useLayoutEffect</strong></p><p>类似于 useEffect 但效果在所有DOM突变后同步运行</p></li></ul><p>这些Hook提供了强大的工具，用于管理状态，处理副作用和重新编辑 React功能组件中的逻辑。</p><h3 id="react中-组件我如果不想让他重复渲染-但是它内部又有许多usestate变量-我应该如何操作" tabindex="-1">React中 组件我如果不想让他重复渲染 但是它内部又有许多useState变量 我应该如何操作 <a class="header-anchor" href="#react中-组件我如果不想让他重复渲染-但是它内部又有许多usestate变量-我应该如何操作" aria-label="Permalink to &quot;React中 组件我如果不想让他重复渲染 但是它内部又有许多useState变量 我应该如何操作&quot;">​</a></h3><ul><li><p>可以使用<code>React.memo</code>来实现</p><ul><li><code>React.memo</code> 是一个高阶组件，它会对传入的组件进行<strong>浅比较</strong>（<code>props</code> 是否相同）。</li><li>如果<code>props</code>没有变化，React将跳过组件的渲染过程，从而达到优化的效果。</li><li>适用于<strong>无状态组件</strong>或<strong>内部状态与父组件无关</strong>的组件。</li></ul></li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;"> import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> memo</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 组件通过memo来包裹</span></span>
<span class="line"><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> MyComponent </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> memo</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">   const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setCount</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">   const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">text</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setText</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">   console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyComponent Rendered</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">   return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">     &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">       &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Count: </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">       &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> setCount</span><span style="color:#BABED8;">(count </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">Increment</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">       &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Text: </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">text</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">       &lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span></span>
<span class="line"><span style="color:#C792EA;">         value</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">text</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">         onChange</span><span style="color:#89DDFF;">={(</span><span style="color:#BABED8;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> setText</span><span style="color:#BABED8;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">       /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">     &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">   )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"> export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> MyComponent</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li>可以使用<code>useCallback</code>和<code>useMemo</code></li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> memo</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useCallback</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> MyComponent </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> memo</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">({</span><span style="color:#BABED8;font-style:italic;"> handleClick</span><span style="color:#89DDFF;"> })</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setCount</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">MyComponent Rendered</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Count: </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> setCount</span><span style="color:#BABED8;">(count </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">Increment</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">handleClick</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">Parent Function</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> ParentComponent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">parentCount</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setParentCount</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> handleClick</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useCallback</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Parent function called</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#F07178;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> setParentCount</span><span style="color:#BABED8;">(parentCount </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#BABED8;">        Increment Parent Count</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#C792EA;"> handleClick</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">handleClick</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> ParentComponent</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="vue2和vue3的区别" tabindex="-1">Vue2和Vue3的区别 <a class="header-anchor" href="#vue2和vue3的区别" aria-label="Permalink to &quot;Vue2和Vue3的区别&quot;">​</a></h3><ul><li><p><strong>根节点不同</strong> vue2中必须要有根标签，vue3中可以没有根标签，会默认将多个根标签包裹在一个<code>fragement</code>文档碎片中，有利于减少内存</p></li><li><p><strong>组合式API和选项式API</strong> Vue2中，采用的是选项式API，将数据和函数集中起来处理，会将功能点切割，当代码逻辑复杂时，不利于代码阅读</p><p>Vue3中 采用的是组合式API， 将同一个功能的代码集中起来处理，使得代码更加有序，有利于代码的书写和维护</p></li><li><p><strong>生命周期的变化</strong></p><ul><li>创建前： <code>beforeCreate</code> -&gt; 使用<code>setup()</code></li><li>创建后： <code>created</code> -&gt; 使用<code>setup()</code></li><li>挂载前： <code>beforeMount</code> -&gt; <code>onBeforeMount</code></li><li>挂载后： <code>mounted</code> -&gt; <code>onMounted</code></li><li>更新前： <code>beforeUpdate</code> -&gt; <code>onBeforeUpdate</code></li><li>更新后： <code>updated</code> -&gt; <code>onUpdated</code></li><li>销毁前： <code>beforeDestroy</code> -&gt; <code>onBeforeMount</code></li><li>销毁后： <code>destroyed</code> -&gt; <code>onUnMounted</code></li><li>异常捕获：<code>errorCaptured</code> -&gt; <code>onErrorCaptured</code></li><li>被激活： <code>onActivated</code> 被包含在<code>&lt;keep-alive&gt;</code>中的组件，会多出两个生命周期钩子函数，被激活时执行</li><li>切换： <code>onDeactivated</code> 例如从A组件切换到B组件，A组件消失后执行</li></ul><p><strong>我们通常会用<code>onMounted</code>钩子在组件挂载后发送异步请求，获取数据并更新组件状态</strong></p><p>这是因为<code>onMounted</code>钩子在组件挂载到DOM后调用，而发送异步请求通常需要确保组件已经挂载，以便正常地操作DOM或者更新组件的状态</p></li><li><p><strong><code>v-for</code>和 <code>v-if</code>的优先级</strong> vue2中<code>v-for</code>的优先级高于<code>v-if</code>，可以放在一起使用，但是不建议这么做，会造成性能上的浪费</p><p>vue3中<code>v-if</code>的优先级高于<code>v-for</code>，并且不能够放在一起使用，会报错。 可以在外部添加一个标签，将<code>v-for</code>移到最外层</p></li><li><p><strong>diff算法不同</strong></p><ul><li><p>vue2的diff算法 主要是使用了 <strong>双端diff算法</strong> 遍历每一个虚拟节点，进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方。用patch记录的消息去更新dom</p><p>缺点： 比较每一个节点，而对于一些不参与更新的元素，进行比较是有点消耗性能的。</p><p>特点： 特别要提一下Vue的patch是即时的，并不是打包后所有修改最后一起操作DOM，也就是在vue中边记录边更新。(React则是将更新放入队列后集中处理)</p><p>流程：</p><ol><li>对比头头、尾尾、头尾、尾头是否可以复用，如果可以复用，就进行节点的更新或移动操作</li><li>如果经过四个端点的比较，都没有可复用的节点，则将旧的子序列保存为节点<code>key</code>为<code>key</code>，<code>index</code>为<code>value</code>的<code>map</code></li><li>拿新的一组子节点的头部节点去<code>map</code>中查找,如果可以找到可复用的节点，则将相应的节点进行更新，并将其移动到头部，然后头部指针右移</li><li>然而，用新的一组子节点中的头部节点去旧的一组子节点中去寻找可复用的节点，并非总能找到，这说明这个新的头部节点是新增节点，只需要将其挂载到头部即可</li><li>经过上述处理，最后还剩下新的节点就批量新增，剩下的旧的节点就批量删除。</li></ol></li><li><p>vue3的diff算法 vue3的diff算法与vue2一样 也是会先进行双端比对，只是双端比对的方式不一样。vue3的diff算法借鉴了字符串比对时的双端比对方式，即优先处理可复用的前置元素和后置元素</p><p>流程：</p><ol><li>处理前置节点</li><li>处理后置节点</li><li>新节点有剩余，则挂载剩余的新节点</li><li>旧节点有剩余，则写在剩余的旧节点</li><li>乱序情况(新、旧节点都有剩余)， 则构建 <strong>最长递增子序列</strong></li><li>节点在最长递增子序列中， 则该节点不需要移动</li><li>节点不在最长递增子序列中，则移动该节点</li></ol></li></ul></li><li><p><strong>响应式原理的不同</strong> vue2 主要通过<code>Object.defineproperty()</code>的<code>get()</code>和<code>set()</code>方法来做数据劫持，结合发布订阅者模式来实现</p><p>vue3中则通过<code>Proxy</code>代理的方式来实现。</p></li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li><strong>更快的渲染性能</strong></li><li><strong>更小的体积</strong></li><li><strong>更好的Typescript支持</strong></li><li><strong>更灵活的组合式API</strong></li><li><strong>更好的响应式系统</strong></li></ul><h3 id="vue响应式如何实现的" tabindex="-1">Vue响应式如何实现的 <a class="header-anchor" href="#vue响应式如何实现的" aria-label="Permalink to &quot;Vue响应式如何实现的&quot;">​</a></h3><ul><li><p><strong>Vue2</strong></p><ul><li><p>Vue2中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过<code>Object.defineProperty(obj, key, descriptor)</code>拦截对象属性访问，当数据被访问或者被改变时，感知并作出反应； 如果是数组，则通过覆盖数组原型方法，扩展它的7个变更方法(<code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>、<code>splice</code>、<code>sort</code>、<code>reverse</code>),使这些方法可以额外的做更新通知，从而做出响应</p></li><li><p>缺点</p><ul><li>初始化时的递归或者遍历会造成性能损失；</li><li>通知更新过程需要维护大量<code>dep</code>实例和<code>watcher</code>实例，额外占用的内存比较多；</li><li>新增或删除对象属性无法拦截，需要通过<code>Vue.set()</code>以及<code>delete</code>这样的API才会生效</li><li>对于<code>ES6</code>中新产生的<code>Map</code>、<code>Set</code>等数据结构不支持</li></ul></li></ul></li><li><p><strong>Vue3</strong></p><ul><li>Vue3响应式使用的是ES6的<code>proxy</code>和<code>Reflect</code>相互配合实现数据响应式，解决了Vue2中视图不能自动更新的问题；</li><li><code>Proxy</code>是深度监听， 所以可以监听对象和数组内的任意元素，从而可以实现视图实时更新；</li><li>响应式大致分为三个阶段： <ul><li><strong>初始化阶段</strong> 初始化阶段通过组件初始化方法形成对应的<code>proxy</code>对象，然后形成一个负责渲染的<code>effect</code>；</li><li><strong>get依赖收集阶段</strong> 通过解析<code>template</code>,替换真实<code>data</code>属性，来触发<code>get</code>，然后通过<code>satck</code>方法，通过<code>proxy</code>对象和key形成对应的<code>deps</code>，将负责渲染的<code>effect</code>存入<code>deps</code>。(这个过程还有其他的<code>effect</code>，比如<code>watchEffect</code>存入<code>deps</code>中)</li><li><strong>set派发更新阶段</strong> 当我们<code>this[key] = value</code>改变属性的时候，首先通过<code>trigger</code>方法，通过<code>Proxy</code>对象和key找到对应的<code>deps</code>， 然后给<code>deps</code>分类分成<code>computedRunners</code>和<code>effect</code>，之后依次执行，如果需要调度的，直接放入调度</li></ul></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>Proxy</code>只会代理对象的第一层，那么Vue3是如何处理这个问题的呢？</p><ul><li>判断当前<code>Reflect.get()</code>的返回值是否为Object， 如果是则在通过<code>reactive</code>方法做袋米，这样就实现了深度观测</li></ul></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>监测数组的时候可能触发多次get/set，那么如何防止触发多次呢？</p><ul><li>我们可以判断key是否为当前被代理对象target自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行trigger</li></ul></div></li></ul><h3 id="typescript中-type和interface的区别" tabindex="-1">Typescript中 type和interface的区别 <a class="header-anchor" href="#typescript中-type和interface的区别" aria-label="Permalink to &quot;Typescript中 type和interface的区别&quot;">​</a></h3><ul><li><p><code>type</code><code>type</code>是类型别名，顾名思义，类型别名只是给类型起一个新名字。<strong>它并不是一个类型，只是一个别名而已</strong>； 有了<code>type</code>，书写Typescript类型会更方便</p></li><li><p><code>interface</code><code>interface</code>(接口)是TS设计出来定义对象类型的，可以对对象的形状进行描述</p><ul><li><p>相同点</p><ol><li>两者都可以定义一个对象或函数</li><li>都允许继承(extends)</li></ol><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">  /** interface 继承 interface  使用 extends 关键字 */</span></span>
<span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> Student</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    grade</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> person</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Student</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    grade</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /** type 继承 type  使用交叉类型 */</span></span>
<span class="line"><span style="color:#C792EA;">  type</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  type</span><span style="color:#FFCB6B;"> Student</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> grade</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /** interface 继承 type */</span></span>
<span class="line"><span style="color:#C792EA;">  type</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> Student</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    grade</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/** type 继承 interface */</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Student</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> grade</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> }</span></span></code></pre></div></li><li><p>差异 不同点</p><ul><li><p><code>type</code> 可以声明基本类型、联合类型、交叉类型、元组， interface只能声明对象</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Name</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> string</span><span style="color:#676E95;font-style:italic;"> // 基本类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> ArrItem</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> string</span><span style="color:#676E95;font-style:italic;">  // 联合类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">ArrItem</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Student</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> grade</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> }</span><span style="color:#676E95;font-style:italic;"> // 交叉类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Teacher</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> &amp;</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> major</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> StudentAndTeacherList</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> [</span><span style="color:#FFCB6B;">Student</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Teacher</span><span style="color:#BABED8;">]  </span><span style="color:#676E95;font-style:italic;">// 元组类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> list</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> StudentAndTeacherList</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> grade</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100</span><span style="color:#89DDFF;"> },</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">xxxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> major</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Chinese</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#BABED8;">]</span></span></code></pre></div></li><li><p><code>type</code> 不能够合并重复声明， <code>interface</code>是可以的</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> {</span><span style="color:#676E95;font-style:italic;">  // 重复声明的 interface 会自动合并</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> person</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 18</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#676E95;font-style:italic;">   // Duplicate identifier &#39;Person&#39;</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> person</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Person</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">lin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 18</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ul></li></ul></li></ul><h3 id="css中我想实现一个上下固定容器-中间自适应的布局我应该如何实现" tabindex="-1">Css中我想实现一个上下固定容器 中间自适应的布局我应该如何实现 <a class="header-anchor" href="#css中我想实现一个上下固定容器-中间自适应的布局我应该如何实现" aria-label="Permalink to &quot;Css中我想实现一个上下固定容器 中间自适应的布局我应该如何实现&quot;">​</a></h3><ul><li>可以使用<code>flex</code>布局来实现</li></ul><p>通过给父级容器设置<code>flex</code>属性，并且让他排列方式为垂直排列：<code>flex-direction:column</code>, 中间容器设置<code>flex:1</code>可以实现此布局</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    .</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">      display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> flex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      flex-direction</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> column</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      height</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100vh</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">    .</span><span style="color:#FFCB6B;">header</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">      background-color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">f8b400</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      padding</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      text-align</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">    .</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">      flex</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      background-color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">d1e8e2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      padding</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      overflow-y</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">    .</span><span style="color:#FFCB6B;">footer</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">      background-color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">6a0572</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      padding</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      text-align</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">fff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">header</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Header (固定高度)</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Content (自适应高度)</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">footer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Footer (固定高度)</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ul><li><p>通过<code>Grid</code>布局来实现</p><p>通过给父级元素设置<code>display:grid</code>, 并且设置网格容器纵向高度为<code>grid-template-rows: auto 1fr auto;</code>, 表示上下两个容器的高度随容器调整，并且中间的容器按比例分配剩余所有高度</p></li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    .</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">      display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      grid-template-rows</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> auto </span><span style="color:#F78C6C;">1fr</span><span style="color:#BABED8;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      height</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100vh</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">    .</span><span style="color:#FFCB6B;">header</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">      background-color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">f8b400</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      padding</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      text-align</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">    .</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">      background-color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">d1e8e2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      padding</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      overflow-y</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">    .</span><span style="color:#FFCB6B;">footer</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">      background-color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">6a0572</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      padding</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 20px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      text-align</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">      color</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">fff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">container</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">header</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Header (固定高度)</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">content</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Content (自适应高度)</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">footer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">Footer (固定高度)</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="vue3中-watch和watcheffect的区别" tabindex="-1">Vue3中 watch和watchEffect的区别 <a class="header-anchor" href="#vue3中-watch和watcheffect的区别" aria-label="Permalink to &quot;Vue3中 watch和watchEffect的区别&quot;">​</a></h3><ul><li><code>watch</code>和<code>watchEffect</code>都是监听器，<code>watchEffect</code>是一个副作用函数，他们之间的区别有： <ol><li><code>watch</code>：既要指明监听数据的源，也要指明监听的回调；</li><li><code>watchEffect</code>： 可以自动监听数据源作为依赖，不用指明监听哪个数据，监听的回调中用到哪个数据，那就监听哪个数据;</li><li><code>watch</code>可以访问改变前后的值， <code>watchEffect</code>只能获取改变后的值;</li><li><code>watch</code>在运行的时候，<strong>不会立即执行</strong>，值改变后才会执行； <code>watchEffect</code>是<strong>运行后可以立即执行</strong>， 这一点可以通过<code>watchEffect</code>的配置项<code>immeriate</code>来改变</li><li><code>watchEffect</code>有点像<code>computed</code>:</li></ol><ul><li><code>computed</code>注重的是计算出来的值(回调函数的返回值)，所以必须写返回值；</li><li><code>watchEffect</code>注重的是过程(回调函数的函数体),所以不用写返回值</li><li><code>watchEffect</code>所指定的回调中用到的数据只要发生变化，则重新执行回调</li></ul></li></ul><h3 id="手写题" tabindex="-1">手写题 <a class="header-anchor" href="#手写题" aria-label="Permalink to &quot;手写题&quot;">​</a></h3><ul><li><p>编写一个函数来查找字符串数组中的最长公共前缀，如果不存在公共前缀，返回空字符串 &quot;&quot;</p><ul><li>示例1： 输入：str = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]； 输出：&quot;fl&quot;</li><li>示例2： 输入：str = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]； 输出：&quot;&quot;</li></ul></li></ul><blockquote><p>水平扫描法</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> fun </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> string</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 取第一个字符串作为初始前缀</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> prefix</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arr</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 从第二个字符串开始遍历</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 不断缩短前缀，直到当前字符串包含这个前缀</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">arr</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">k</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">prefix</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">!==</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 去掉前缀后的最后一个字符</span></span>
<span class="line"><span style="color:#BABED8;">        prefix</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> prefix</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">prefix</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> prefix</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><blockquote><p>二分法</p></blockquote><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">  // 检查所有字符串时候都带有指定前缀</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> checkHasPrefix </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> prefix</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">every</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> item</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">prefix</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 二分法查找</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> fun2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> string</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 寻找最短字符串的长度</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> minLen</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">min</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> item</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> low</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> high</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> minLen</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 二分法查找最长公共前缀</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">low</span><span style="color:#89DDFF;"> &lt;=</span><span style="color:#BABED8;"> high</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">((</span><span style="color:#BABED8;">low</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> high</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;"> 2</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> prefix</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arr</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> mid</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">checkHasPrefix</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> prefix</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 尝试更长的前缀</span></span>
<span class="line"><span style="color:#BABED8;">        low</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 尝试缩短前缀</span></span>
<span class="line"><span style="color:#BABED8;">        high</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> mid</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 最长公共前缀的长度为high</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> arr</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> high</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><ul><li><p>寻找字符串中出现最多的字符串</p><ul><li>示例：var str = &quot;afjghdfraaaasdenas&quot;； 输出 &#39;a&#39;</li></ul></li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">str</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> string</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> map</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> maxChar</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> maxCount</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //统计每个字符出现的次数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> of</span><span style="color:#BABED8;"> str</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">||</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      //如果当前字符的计数超过了maxCount， 更新maxChar和maxCount</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> maxCount</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        maxChar</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> key</span></span>
<span class="line"><span style="color:#BABED8;">        maxCount</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> maxChar</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div><ul><li>树形结构</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">部门1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">部门2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">部门3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">部门4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">部门5</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    id</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    pid</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    children</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#BABED8;">[]</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> buildTree </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#BABED8;">[] </span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> map</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {};</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#F07178;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //先遍历数组，将每个元素的id作为键，将元素本身放在map中</span></span>
<span class="line"><span style="color:#BABED8;">    data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">item</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;">item</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> children</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [] </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //再次遍历数组，构建树形结构</span></span>
<span class="line"><span style="color:#BABED8;">    data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">item</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> pid</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> item</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">pid</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        //pid为0的时候是根节点</span></span>
<span class="line"><span style="color:#BABED8;">        result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">item</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 否则， 将当前元素添加到其父元素的children数组当中</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">pid</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">          map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">pid</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">children</span><span style="color:#89DDFF;">!.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">item</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span></code></pre></div><ul><li>reduce实现树形结构</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">部门1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">部门2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">部门3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">部门4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">部门5</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 4</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#BABED8;">  ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  interface</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    id</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    pid</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    children</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#BABED8;">[]</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> reduceTree </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> map</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> TreeNode</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TreeNode</span><span style="color:#F07178;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cur</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 为每个节点初始化 children 数组</span></span>
<span class="line"><span style="color:#BABED8;">      map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> children</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">children</span><span style="color:#89DDFF;"> ||</span><span style="color:#F07178;"> [] </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> treeCur</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">pid</span><span style="color:#89DDFF;"> ===</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        //根节点直接推入acc 结果数组</span></span>
<span class="line"><span style="color:#BABED8;">        acc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">treeCur</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        //如果不是根节点，将其添加到父节点的 children当中</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">pid</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">          map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">pid</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> item</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">pid</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> children</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [] </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#BABED8;">        map</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">cur</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">pid</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">children</span><span style="color:#89DDFF;">!.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">treeCur</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> acc</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span><span style="color:#F07178;"> [])</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre></div>`,59))])}const f=p(F,[["render",D]]);export{g as __pageData,f as default};
