import{_ as e}from"./chunks/CustomLink.BOsLVjvp.js";import{_ as t}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.ahzV38-K.js";import{_ as c,c as r,j as a,a as n,G as l,a6 as F,o as D}from"./chunks/framework.D7D3iUXQ.js";import"./chunks/theme._-NuN2Vt.js";const f=JSON.parse('{"title":"240328面试 线上","description":"","frontmatter":{},"headers":[],"relativePath":"interview/weekly/240328.md","filePath":"interview/weekly/240328.md","lastUpdated":1731426020000}'),y={name:"interview/weekly/240328.md"};function i(d,s,B,C,u,g){const p=t,o=e;return D(),r("div",null,[s[0]||(s[0]=a("h1",{id:"_240328面试-线上",tabindex:"-1"},[n("240328面试 线上 "),a("a",{class:"header-anchor",href:"#_240328面试-线上","aria-label":'Permalink to "240328面试 线上"'},"​")],-1)),l(p,{readTime:"13",words:"4k"}),s[1]||(s[1]=a("h3",{id:"es6常用语法",tabindex:"-1"},[n("ES6常用语法 "),a("a",{class:"header-anchor",href:"#es6常用语法","aria-label":'Permalink to "ES6常用语法"'},"​")],-1)),a("ul",null,[a("li",null,[l(o,{title:"ES6新特性",href:"../../native/javascript/ES6新特性一"})])]),s[2]||(s[2]=F(`<h3 id="css盒模型" tabindex="-1">CSS盒模型 <a class="header-anchor" href="#css盒模型" aria-label="Permalink to &quot;CSS盒模型&quot;">​</a></h3><p>盒模型是一个盛放内容的容器, 它由四部分组成 元素的具体内容<code>content</code>、 内边距<code>padding</code>、边框<code>border</code>、外边距<code>margin</code>组成</p><p>设置元素的宽高只是设置了内容区域的宽高,盒子真正的宽高应该是 内容宽高 + 内填充 + 边界边框 + 外边距</p><p>和模型有两种 <em>标准盒模型</em>和<em>IE盒模型</em>, 这两者的区别主要在于宽高的包含范围:</p><p>标准盒模型的宽高指的是<strong>内容区域<code>content</code>的宽高</strong>, 而IE盒模型的宽高指的是<strong>内容区<code>content</code> + 内边距<code>padding</code> + 边框<code>border</code>的宽高</strong></p><h3 id="promise和-async-await用法区别" tabindex="-1">Promise和 Async Await用法区别 <a class="header-anchor" href="#promise和-async-await用法区别" aria-label="Permalink to &quot;Promise和 Async Await用法区别&quot;">​</a></h3><h4 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h4><p>Promise 是 JavaScript 中用来处理异步操作的对象，它代表一个异步操作最终的完成或失败，可以获取异步操作的结果或错误。 Promise 通过 then() 方法来处理异步操作的成功和失败情况，可以链式调用多个 then() 方法。 使用 Promise 时，需要手动处理异步操作的状态，即 pending、fulfilled（resolved）和 rejected 状态。</p><h3 id="react组件传参" tabindex="-1">React组件传参 <a class="header-anchor" href="#react组件传参" aria-label="Permalink to &quot;React组件传参&quot;">​</a></h3><h4 id="父组件传子组件" tabindex="-1">父组件传子组件 <a class="header-anchor" href="#父组件传子组件" aria-label="Permalink to &quot;父组件传子组件&quot;">​</a></h4><h5 id="通过props参数进行传递" tabindex="-1">通过props参数进行传递 <a class="header-anchor" href="#通过props参数进行传递" aria-label="Permalink to &quot;通过props参数进行传递&quot;">​</a></h5><ul><li>父组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Parent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">Child</span><span style="color:#C792EA;"> param1</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> param2</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>子组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ({</span><span style="color:#BABED8;font-style:italic;"> param1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> param2</span><span style="color:#89DDFF;"> }):</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;&gt;</span><span style="color:#BABED8;">父组件传递的参数:</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> param1 </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">, </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> param2 </span><span style="color:#89DDFF;">}&lt;/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上述示例中， <code>param1</code>和<code>param2</code>就是父组件传递给子组件的参数，子组件运行结果为 <code>父组件传递的参数:1,2</code></p><h4 id="子组件传递给父组件" tabindex="-1">子组件传递给父组件 <a class="header-anchor" href="#子组件传递给父组件" aria-label="Permalink to &quot;子组件传递给父组件&quot;">​</a></h4><p>子组件传递给父组件严格来讲还是父传子， 通过<code>props</code>或者<code>ref</code>来实现传参效果</p><h5 id="使用回调函数" tabindex="-1">使用回调函数 <a class="header-anchor" href="#使用回调函数" aria-label="Permalink to &quot;使用回调函数&quot;">​</a></h5><p>在父组件中定义一个回调函数<code>getChildVal</code>, 将这个函数绑定在子组件上通过props传入子组件，当子组件中是时间或者什么实际需要向父组件传值时， 在子组件内就可以调用这个函数并传入值，此时定义在父组件的函数被触发，并可以拿到子组件的传值</p><ul><li>父组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> useState</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Parent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setData</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> getChildVal</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">从子组件获取的值</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#82AAFF;">    setData</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#BABED8;">    父组件接收到的值： </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#FFCB6B;">Child</span><span style="color:#C792EA;"> onchange</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">getChildVal</span><span style="color:#89DDFF;">}/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>子组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">props</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setValue</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> changeVal</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    setValue</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">    props</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onchange</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span><span style="color:#676E95;font-style:italic;">/* 当子组件需要向父组件传值时， 调用changeVal函数进行传值 */</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">div</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">changeVal</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">子组件传递给父组件</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h5 id="通过ref" tabindex="-1">通过ref <a class="header-anchor" href="#通过ref" aria-label="Permalink to &quot;通过ref&quot;">​</a></h5><p>子组件传递给父组件严格来讲还是父传子， 父组件传递给子组件<code>ref</code>，子组件将想要暴露给父组件的值放在上面， 然后父组件就可以使用这个值；</p><p>首先需要导入对应模块包<code>useImperativeHandle</code>、<code>useRef</code>、<code>forwardRef</code></p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useRef</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useImperativeHandle</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> useEffect</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> forwardRef</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><ul><li>父组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Parent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useRef</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#82AAFF;">  useEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ref</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#F07178;"> [])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#FFCB6B;">Child</span><span style="color:#C792EA;">  ref</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">ref</span><span style="color:#89DDFF;">}/&gt;</span><span style="color:#676E95;font-style:italic;"> // 将ref传递给子组件</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>子组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 如果ref是设置在自定义组件上， 则需要用forwardRef处理一下</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Child </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> forwardRef</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">({},</span><span style="color:#BABED8;font-style:italic;"> ref</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  useImperativeHandle</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ref</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    data</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">我是子组件</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;&gt;</span><span style="color:#BABED8;">我是子组件</span><span style="color:#89DDFF;">&lt;/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><p>上述示例运行后控制台输出</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">current</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#FFCB6B;">data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">我是子组件</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="跨组件传值-父组件传孙组件" tabindex="-1">跨组件传值(父组件传孙组件) <a class="header-anchor" href="#跨组件传值-父组件传孙组件" aria-label="Permalink to &quot;跨组件传值(父组件传孙组件)&quot;">​</a></h4><p>在跨组件传值过程中，我们可以使用父传子的方法，一层一层嵌套传递</p><ul><li>父组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Parent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">Child1</span><span style="color:#C792EA;"> param1</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> param2</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>子组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//子组件</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Child1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ({</span><span style="color:#BABED8;font-style:italic;"> param1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> param2</span><span style="color:#89DDFF;"> })</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">Child2</span><span style="color:#C792EA;"> param1</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">param1</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">param2</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">param2</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>孙组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Child2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ({</span><span style="color:#BABED8;font-style:italic;"> param1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> param2</span><span style="color:#89DDFF;"> })</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;&gt;</span><span style="color:#BABED8;">父组件传递的参数：</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">param1</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">,</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">param2</span><span style="color:#89DDFF;">}&lt;/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>通过层级嵌套传参 我们也可以实现跨组件传递，但如果有多层嵌套时，一层一层之间传递很非常冗余和麻烦，有时候也会搞混参数来源， 所以可以使用<code>context</code>来解决这个问题</p><p>再项目目录创建一个<code>context.ts</code>的文件，用于创建我们的<code>context</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> createContext</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> myContext </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> createContext</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> myContext</span></span></code></pre></div><p>然后在组件文件中引入定义的<code>myContext</code>, 并引入react包：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> useContext</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> MyContext </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">@/context</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><ul><li>父组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Parent </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //使用provider传值</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">&lt;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#FFCB6B;">MyContext.Provider</span><span style="color:#C792EA;"> value</span><span style="color:#89DDFF;">={{</span><span style="color:#F07178;"> param1</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> param2</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }}&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#FFCB6B;">Child1</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#FFCB6B;">MyContext.Provider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/&gt;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>子组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//子组件无需改动</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Child1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">Child2</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>孙组件</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> Child2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //通过useContext获取父组件的值</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> param1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> param2</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useContext</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">MyContext</span><span style="color:#F07178;">)  </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> &lt;&gt;</span><span style="color:#BABED8;">父组件传递的参数：</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">param1</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">,</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;">param2</span><span style="color:#89DDFF;">}&lt;/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="react-子组件如何传递给父组件参数" tabindex="-1">React 子组件如何传递给父组件参数 <a class="header-anchor" href="#react-子组件如何传递给父组件参数" aria-label="Permalink to &quot;React 子组件如何传递给父组件参数&quot;">​</a></h3><p>父组件通过设置onchange事件传递给子组件， 子组件通过调用props.onchange事件来传递参数</p><h3 id="css3常用属性" tabindex="-1">CSS3常用属性 <a class="header-anchor" href="#css3常用属性" aria-label="Permalink to &quot;CSS3常用属性&quot;">​</a></h3><ul><li>border-radius 边框圆角</li></ul><p>允许创建元素的圆角边框</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  border-radius</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10px</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>box-shadow 容器阴影</li></ul><p>添加元素的阴影效果</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  box-shadow</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3px</span><span style="color:#F78C6C;"> 3px</span><span style="color:#F78C6C;"> 5px</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">000</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>text-shadow 文本阴影</li></ul><p>添加文本的阴影效果</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  text-shadow</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2px</span><span style="color:#F78C6C;"> 2px</span><span style="color:#F78C6C;"> 4px</span><span style="color:#89DDFF;"> #</span><span style="color:#BABED8;">000000</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>gradient 渐变</li></ul><p>用于创建颜色渐变的背景</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  background-image</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> linear-gradient</span><span style="color:#89DDFF;">(to</span><span style="color:#BABED8;"> right</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> red</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> yellow</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>transform 变换</li></ul><p>用于对元素进行旋转、缩放、平移或倾斜</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> rotate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">45deg</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> /**旋转 */</span></span>
<span class="line"><span style="color:#B2CCD6;">  transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> translate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10px</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> /**平移 */</span></span>
<span class="line"><span style="color:#B2CCD6;">  transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> scale</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">  /**缩放 */</span></span>
<span class="line"><span style="color:#B2CCD6;">  transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> skew</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">30deg</span><span style="color:#89DDFF;">)</span><span style="color:#676E95;font-style:italic;"> /**倾斜 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>transition 过渡</li></ul><p>用于在不同状态之间平滑地过渡CSS属性的值</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  transition</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> width </span><span style="color:#F78C6C;">2s</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>animation 动画</li></ul><p>用于创建自定义的动画效果</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">@keyframes</span><span style="color:#BABED8;font-style:italic;"> slide</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#FFCB6B;"> from</span><span style="color:#89DDFF;"> {</span><span style="color:#B2CCD6;"> left</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0px</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#FFCB6B;"> to</span><span style="color:#89DDFF;"> {</span><span style="color:#B2CCD6;"> left</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100px</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  animation</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> slide </span><span style="color:#F78C6C;">2s</span><span style="color:#BABED8;"> infinite</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> alternate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>flex 弹性布局</li></ul><p>用于创建灵活的布局结构</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> flex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>grid 网格布局</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>media queries 媒体查询</li></ul><p>用于根据设备特性(如屏幕尺寸、分辨率等) 应用不同的CSS样式</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#BABED8;"> screen </span><span style="color:#89DDFF;">and</span><span style="color:#89DDFF;"> (</span><span style="color:#FFCB6B;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 768px</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  /** styles for screens up to 768px wide */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="常用布局方式" tabindex="-1">常用布局方式 <a class="header-anchor" href="#常用布局方式" aria-label="Permalink to &quot;常用布局方式&quot;">​</a></h3><p>在网页设计和前端开发中，有许多常用的布局方式可以实现不同的页面结构和样式。以下是一些常用的布局方式：</p><ol><li><p><strong>传统布局</strong>：</p><ul><li>基于浮动（Float）和清除浮动（Clearfix）的布局。</li><li>使用定位（Positioning）属性（如 <code>position: relative</code> 和 <code>position: absolute</code>）来布局。</li></ul></li><li><p><strong>Flexbox 布局</strong>：</p><ul><li>使用 Flexbox（弹性盒子布局）可以实现灵活的、自适应的布局。</li><li>通过设置容器的 <code>display: flex</code> 属性，可以指定其为 Flex 容器，然后使用各种 Flexbox 属性来控制其子元素的排列方式。</li></ul></li><li><p><strong>Grid 布局</strong>：</p><ul><li>使用 CSS Grid（网格布局）可以创建复杂的网格结构。</li><li>通过设置容器的 <code>display: grid</code> 属性，可以指定其为 Grid 容器，然后使用网格行和列的属性来定义布局。</li></ul></li><li><p><strong>响应式布局</strong>：</p><ul><li>使用媒体查询（Media Queries）可以根据不同的设备尺寸和屏幕宽度应用不同的样式。</li><li>可以使用相对单位（如百分比、em、rem 等）和 Flexbox/Grid 布局来实现响应式设计，使页面在不同设备上具有良好的显示效果。</li></ul></li><li><p><strong>流式布局</strong>：</p><ul><li>使用百分比单位来设置宽度，使得元素可以根据父容器的大小自动调整大小，从而实现流式布局。</li></ul></li><li><p><strong>固定布局</strong>：</p><ul><li>使用固定单位（如像素）来设置元素的宽度和高度，使得元素在不同设备上保持固定的大小和位置。</li></ul></li><li><p><strong>层叠布局</strong>：</p><ul><li>使用定位属性（如 <code>position: absolute</code> 和 <code>position: relative</code>）来实现元素的层叠效果，使得页面元素可以重叠、覆盖和定位在不同的位置上。</li></ul></li><li><p><strong>混合布局</strong>：</p><ul><li>可以结合使用以上多种布局方式，根据具体需求来实现复杂的页面结构和样式。</li></ul></li></ol><h3 id="css实现垂直居中" tabindex="-1">CSS实现垂直居中 <a class="header-anchor" href="#css实现垂直居中" aria-label="Permalink to &quot;CSS实现垂直居中&quot;">​</a></h3><p>在 CSS 中实现垂直居中可以使用多种方法，以下是其中几种常见的方式：</p><ol><li><p><strong>使用 Flexbox</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> flex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  align-items</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* 垂直居中 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>使用表格布局</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> table</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> table-cell</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  vertical-align</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> middle</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* 垂直居中 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>使用绝对定位和负边距</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  position</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> relative</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  position</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> absolute</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  top</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 50%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  transform</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> translateY</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">-50%</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> /* 垂直居中 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>使用网格布局</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  place-items</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* 垂直和水平居中 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>使用 Flexbox 和伪元素</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  display</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> flex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">before</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">after</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  content</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  flex</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  align-self</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> center</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* 垂直居中 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>使用 line-height 属性（适用于单行文本）</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  line-height</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 200px</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* 父容器高度的一半 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p><strong>使用 calc() 函数</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  position</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> relative</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  height</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 400px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">  position</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> absolute</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#B2CCD6;">  top</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> calc</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 50px</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> /* 垂直居中 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li></ol><h3 id="宏任务和微任务的关系" tabindex="-1">宏任务和微任务的关系 <a class="header-anchor" href="#宏任务和微任务的关系" aria-label="Permalink to &quot;宏任务和微任务的关系&quot;">​</a></h3><p>宏任务（Macro Task）和微任务（Micro Task）是 JavaScript 中处理异步操作的两种不同类型。</p><ul><li><strong>宏任务（Macro Task）</strong>：通常代表一些较大的任务，比如 setTimeout、setInterval、I/O 操作等。当执行完一个宏任务后，JavaScript 引擎会检查是否有微任务需要执行，然后再执行微任务队列中的任务。</li></ul><p>常见的宏任务包括整体代码（Script）执行、setTimeout、setInterval、I/O 操作、UI 渲染等。</p><ul><li><strong>微任务（Micro Task）</strong>：微任务通常是在当前任务执行结束后立即执行的任务，它们相对于宏任务来说执行顺序更早。</li></ul><p>常见的微任务包括 Promise 的 then 方法、MutationObserver、process.nextTick 等。</p><p>JavaScript 中执行异步操作时，宏任务和微任务的执行顺序如下：</p><ol><li>执行一个宏任务（例如执行整体代码、定时器等）。</li><li>当宏任务执行完毕后，在宏任务执行栈清空之前，执行所有微任务队列中的任务。</li><li>当前宏任务执行栈清空后，检查是否有渲染任务，如果有则执行渲染。</li><li>执行下一个宏任务（如果有）。</li></ol><p>总的来说，微任务优先级比较高，会在下一个宏任务之前执行完毕，而宏任务则相对较慢，会在当前宏任务执行完毕后执行。</p><h3 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h3><p>是什么 当一个函数中的内部函数被拿到函数外部调用，又因为在js中内层作用域总是能访问外层作用域的，那么内部函数存在对外部函数中变量的引用，这些变量的集合称之为闭包</p><h4 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h4><p>创建私有变量 （全局变量不易维护） 延长变量的生命周期 实现柯里化（颗粒）</p><h3 id="react18新特性" tabindex="-1">React18新特性 <a class="header-anchor" href="#react18新特性" aria-label="Permalink to &quot;React18新特性&quot;">​</a></h3><h4 id="升级" tabindex="-1">升级 <a class="header-anchor" href="#升级" aria-label="Permalink to &quot;升级&quot;">​</a></h4><ol><li>React18 不再支持IE浏览器</li><li>新项目直接使用 npm 或者 yarn 安装最新版依赖即可</li><li>改变根节点的挂在方式： 使用新的API <code>creatRoot</code>, 使用旧的API仍然兼容， 只用使用了<code>createRoot</code>之后才会有React18的新特性</li></ol><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createRoot</span><span style="color:#BABED8;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#FFCB6B;">React.StrictMode</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#FFCB6B;">Provider</span><span style="color:#C792EA;"> store</span><span style="color:#89DDFF;">={</span><span style="color:#BABED8;">store</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#FFCB6B;">Provider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#FFCB6B;">React.StrictMode</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;">)</span></span></code></pre></div><p>在上面的示例中，我们使用了<code>ReactDOM.createRoot</code>方法创建了一个根节点，并使用 <code>render</code>方法将组件渲染到根节点中。这样可以让React应用更快地响应用户操作，提高用户体验。</p><h4 id="setstate异步同步" tabindex="-1">setState异步同步 <a class="header-anchor" href="#setstate异步同步" aria-label="Permalink to &quot;setState异步同步&quot;">​</a></h4><ol><li><p><strong>异步更新(默认行为)</strong></p><p>在 React 18 中，默认情况下，<code>setState</code> 方法会以异步方式进行更新。这意味着它会将多个状态更新批量处理，并在适当的时机进行合并和应用，以优化性能。这样做可以减少不必要的重渲染，并提高应用程序的响应性。</p></li><li><p><strong>同步更新(使用<code>flushSync</code>)</strong></p><p>尽管<code>setState</code>默认以异步方式进行更新，但在某些情况下，您可能需要立即获取更新后的状态。为了实现此目的，React 18 提供了<code>flushSync</code>方法，可以强制执行同步更新。</p></li></ol><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> flushSync</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 同步更新</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">flushSync</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">state</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;"> }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="新增api" tabindex="-1">新增API <a class="header-anchor" href="#新增api" aria-label="Permalink to &quot;新增API&quot;">​</a></h4><ol><li><p><strong>startTransition</strong></p><p><code>startTransition</code> 是一个新的 React API，旨在帮助开发者优化应用程序的性能和用户体验。这个函数可以告诉 React 在下次重新渲染组件时，应该延迟更新状态。这样，一些较慢的操作（例如异步请求等）就可以在后台执行，不会影响应用程序的交互性能。</p></li><li><p><strong>useTransition</strong></p><p><code>useTransition</code> 是 <code>startTransition</code> 的 hook 版本。它可以在函数组件中使用，从而让开发者更方便地控制异步操作的状态。</p></li><li><p><strong>createRoot</strong></p><p><code>createRoot</code> 是一个新的入口函数，用于创建根React组件。它可以替代原先的<code>ReactDOM.render</code>方法，使得开发者可以将多个根节点渲染到一个页面上。</p></li><li><p><strong>useDeferredValue</strong></p><p><code>useDeferredValue</code> 是一个新的 hook，可以将某个状态值的更新延迟一段时间后再执行，从而提高应用程序的性能和用户体验。类似于防抖</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> deferredSearchTerm </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> useDeferredValue</span><span style="color:#BABED8;">(searchTerm</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;">       </span></span>
<span class="line"><span style="color:#F07178;">  timeoutMs</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1000</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p><strong>useMutableSource</strong></p><p><code>useMutableSource</code> 允许开发者访问可变的数据源，并在多个组件之间共享状态。这对于高性能的数据订阅和共享非常有用。</p></li></ol><h4 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-label="Permalink to &quot;严格模式&quot;">​</a></h4><p>React 严格模式（Strict Mode）是一个开发模式，可以帮助开发者发现一些潜在的问题，以提高应用程序的质量。启用严格模式后，React 会执行额外的检查和警告，以帮助开发者发现一些常见问题，并尽早地解决它们。</p><p>React 严格模式只在开发环境下工作，不会影响生产环境下的应用程序。</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> ReactDOM </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#FFCB6B;">React.StrictMode</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#FFCB6B;">React.StrictMode</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;">  document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>React 严格模式主要包含以下几个方面的检查和提示：</p><ul><li><p>识别不安全的生命周期方法，提示开发者修改，这些方法可能会导致意外的副作用或错误。</p></li><li><p>检测意外的副作用，例如：多余的重新渲染、不符合预期的函数调用等。</p></li><li><p>检测某些过时的 API 使用，提供更好的替代方案。</p></li><li><p>检测警告信息，使其更加明显和易于发现。</p></li></ul><h5 id="在应用程序启动时禁用严格模式" tabindex="-1">在应用程序启动时禁用严格模式 <a class="header-anchor" href="#在应用程序启动时禁用严格模式" aria-label="Permalink to &quot;在应用程序启动时禁用严格模式&quot;">​</a></h5><p>在一些情况下，移除 React.StrictMode 组件可能不太方便，例如：在大型项目中或已经存在大量的 console.log 调用等代码片段。此时，可以在应用程序启动时禁用严格模式。</p><p>在应用程序启动文件中，我们可以使用 React 的 <code>unstable_disableDevMode()</code> 函数来禁用严格模式</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> ReactDOM </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> App </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">./App</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unstable_disableDevMode</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#FFCB6B;">React.StrictMode</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/</span><span style="color:#FFCB6B;">React.StrictMode</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;">  document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="并发模式" tabindex="-1">并发模式 <a class="header-anchor" href="#并发模式" aria-label="Permalink to &quot;并发模式&quot;">​</a></h4><p>React 并发模式（React Concurrent Mode）是 React 的一项新功能，旨在改善在复杂应用程序中的用户体验和性能。在传统的 React 中，更新组件树时会阻塞用户界面的响应，可能导致卡顿和延迟。</p><p>而并发模式通过将任务分解为多个小步骤，让 React 在执行渲染和布局时可以中断和恢复任务，从而提供更平滑和响应式的用户体验。</p><p>在 React 并发模式中，引入了两个主要概念：任务调度和优先级。任务调度器负责决定哪些任务执行、何时执行以及中断和恢复任务。优先级允许 React 根据任务的紧迫性来安排任务的执行顺序，确保响应度更高的任务能够优先执行。</p><p>利用并发模式，React 可以将渲染过程分解为多个小任务，并根据优先级来动态调整任务执行的顺序。这样，在浏览器空闲时间或网络请求等异步操作期间，React 可以暂停当前任务，执行其它具有更高优先级的任务，以实现更爽快的用户交互体验。</p><p>总而言之，React 并发模式通过任务调度和优先级机制，提供了更好的用户体验和性能，使得 React 应用程序能够更加平滑地响应用户操作。</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#BABED8;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#BABED8;">  useState</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#BABED8;">  useEffect</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#BABED8;">  unstable_ConcurrentMode</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#BABED8;"> ConcurrentMode</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> App </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ():</span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">FC</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> [</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setCount</span><span style="color:#89DDFF;">]</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> useState</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  useEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> timer</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      setCount</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">prevCount</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> prevCount</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span><span style="color:#F78C6C;"> 1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      clearInterval</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">timer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#F07178;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#FFCB6B;">ConcurrentMode</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        &lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">计数器</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        &lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/</span><span style="color:#FFCB6B;">ConcurrentMode</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#BABED8;"> App</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,131))])}const b=c(y,[["render",i]]);export{f as __pageData,b as default};
