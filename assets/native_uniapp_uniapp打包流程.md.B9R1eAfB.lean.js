import{_ as n}from"./chunks/CustomLink.CogLOo7d.js";import{_ as s}from"./chunks/PageInfo.vue_vue_type_script_setup_true_lang.Co43k6IT.js";import{_ as r,c as d,j as o,a as e,G as l,a6 as t,o as c}from"./chunks/framework.D7D3iUXQ.js";import"./chunks/theme.BzyCvZRr.js";const u="/web-docs/image/uni-app%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.png",h="/web-docs/image/%E5%88%9B%E5%BB%BA%E5%AF%86%E9%92%A5.png",m="/web-docs/image/%E5%AF%86%E9%92%A5%E4%BF%A1%E6%81%AF%E5%A1%AB%E5%86%99.png",A="/web-docs/image/uniapp%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE.png",E="/web-docs/image/uniapp%E5%9B%BE%E6%A0%87%E9%85%8D%E7%BD%AE.png",b="/web-docs/image/uniapp%E5%BA%94%E7%94%A8%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE.png",g="/web-docs/image/%E8%BF%90%E8%A1%8C%E5%88%B0%E5%9F%BA%E5%BA%A7.png",k="/web-docs/image/uniapp%E4%BA%91%E6%89%93%E5%8C%85%E9%80%89%E9%A1%B9.png",q="/web-docs/image/%E4%BA%91%E6%89%93%E5%8C%85%E7%8A%B6%E6%80%81.png",y="/web-docs/image/%E6%9C%AC%E5%9C%B0%E6%89%93%E5%8C%85.png",B="/web-docs/image/www%E6%96%87%E4%BB%B6%E5%A4%B9.png",f="/web-docs/image/%E4%BA%91%E6%89%93%E5%8C%85%E9%A1%B5%E9%9D%A2.png",D="/web-docs/image/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%BA%E5%BA%A7.png",C="/web-docs/image/%E6%90%9C%E7%B4%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%BA%E5%BA%A7.png",j=JSON.parse('{"title":"uni-app 打包流程","description":"","frontmatter":{},"headers":[],"relativePath":"native/uniapp/uniapp打包流程.md","filePath":"native/uniapp/uniapp打包流程.md","lastUpdated":1736241813000}'),P={name:"native/uniapp/uniapp打包流程.md"},w={class:"warning custom-block"};function S(v,a,x,_,F,N){const p=s,i=n;return c(),d("div",null,[a[9]||(a[9]=o("h1",{id:"uni-app-打包流程",tabindex:"-1"},[e("uni-app 打包流程 "),o("a",{class:"header-anchor",href:"#uni-app-打包流程","aria-label":'Permalink to "uni-app 打包流程"'},"​")],-1)),l(p,{readTime:"12",words:"3.8k"}),a[10]||(a[10]=o("h3",{id:"背景",tabindex:"-1"},[e("背景 "),o("a",{class:"header-anchor",href:"#背景","aria-label":'Permalink to "背景"'},"​")],-1)),a[11]||(a[11]=o("p",null,[e("在当前移动应用开发的大环境下，"),o("code",null,"uni-app"),e(" 作为一种使用 "),o("em",null,[o("strong",null,"Vue.js")]),e(" 开发多平台应用的框架，为开发者提供了快速构建跨平台应用的能力。")],-1)),a[12]||(a[12]=o("h3",{id:"准备环境",tabindex:"-1"},[e("准备环境 "),o("a",{class:"header-anchor",href:"#准备环境","aria-label":'Permalink to "准备环境"'},"​")],-1)),o("p",null,[a[0]||(a[0]=e("NodeJs： ")),l(i,{title:"NodeJS官网",href:"https://nodejs.org/en"}),a[1]||(a[1]=e(" HBuilderX： ")),l(i,{title:"HBuilderX官网",href:"https://www.dcloud.io/hbuilderx.html"}),a[2]||(a[2]=e(" JDK(Java Development Kit): ")),l(i,{title:"JDK下载地址",href:"https://www.oracle.com/java/technologies/downloads/"})]),o("div",w,[a[5]||(a[5]=o("p",{class:"custom-block-title"},"WARNING",-1)),a[6]||(a[6]=o("p",null,[o("strong",null,"如果想要实现本地版离线打包， 还需要安装安卓的环境：")],-1)),a[7]||(a[7]=o("p",null,"离线打包需要安装以下工具：",-1)),o("p",null,[a[3]||(a[3]=e("Android Studio 下载地址： ")),l(i,{title:"Android Studio官网",href:"https://developer.android.google.cn/studio?hl=zh-cn"})]),o("p",null,[a[4]||(a[4]=e("App离线SDK下载：")),l(i,{title:"最新平台安卓离线版SDK",href:"https://nativesupport.dcloud.net.cn/AppDocs/download/android.html"})]),a[8]||(a[8]=o("blockquote",null,[o("p",null,[o("strong",null,"非特殊情况下，非专业的安卓开发人员，真的不建议使用离线打包。 不建议离线打包")])],-1))]),a[13]||(a[13]=t('<h3 id="创建应用" tabindex="-1">创建应用 <a class="header-anchor" href="#创建应用" aria-label="Permalink to &quot;创建应用&quot;">​</a></h3><ol><li>在 HBuilderX 中新建新的uni-app项目或打开已有的项目</li><li>输入项目的名称和存放路径，并选择合适的模版</li><li>点击“创建”来生成项目文件</li></ol><img src="'+u+`" alt="HbuilderX创建项目"><h3 id="生成签名证书" tabindex="-1">生成签名证书 <a class="header-anchor" href="#生成签名证书" aria-label="Permalink to &quot;生成签名证书&quot;">​</a></h3><p>生成 Android 平台签名证书（.keystore）是用于对应用进行数字签名以确保应用的安全性和完整性。下面是一个简单的 Android 平台签名证书生成指南：</p><h4 id="步骤一-安装sdk-java-development-kit" tabindex="-1">步骤一： 安装SDK(Java Development Kit) <a class="header-anchor" href="#步骤一-安装sdk-java-development-kit" aria-label="Permalink to &quot;步骤一： 安装SDK(Java Development Kit)&quot;">​</a></h4><ol><li>访问 Oracle 网站， 并下载适合自己的操作系统的JDK安装程序</li><li>执行安装程序， 并按照提示进行安装</li></ol><h4 id="步骤二-打开终端或命令提示符" tabindex="-1">步骤二: 打开终端或命令提示符 <a class="header-anchor" href="#步骤二-打开终端或命令提示符" aria-label="Permalink to &quot;步骤二: 打开终端或命令提示符&quot;">​</a></h4><ol><li>Windows上 按下<code>win</code>+ <code>R</code> 输入 <code>cmd</code>, 然后回车键打开命令提示符</li><li>Mac上， 打开&#39;应用程序&#39;&gt; &#39;实用工具&#39; &gt; &#39;终端&#39; 或者其他安装的终端软件(例如<code>iTerm2</code>)</li></ol><h4 id="步骤三-导航到-jdk的bin目录" tabindex="-1">步骤三：导航到 JDK的bin目录 <a class="header-anchor" href="#步骤三-导航到-jdk的bin目录" aria-label="Permalink to &quot;步骤三：导航到 JDK的bin目录&quot;">​</a></h4><p>在终端或命令提示符中，使用以下命令导航到你安装的 JDK 的 bin 目录。根据你的 JDK 版本和安装路径可能有所不同，以下命令仅供参考。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># JDK文件名要看安装的JDK版本</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#C3E88D;"> C:</span><span style="color:#BABED8;">\\P</span><span style="color:#C3E88D;">rogram</span><span style="color:#C3E88D;"> Files</span><span style="color:#BABED8;">\\J</span><span style="color:#C3E88D;">ava</span><span style="color:#BABED8;">\\j</span><span style="color:#C3E88D;">dk1.8.0_221</span><span style="color:#BABED8;">\\b</span><span style="color:#C3E88D;">in</span><span style="color:#C3E88D;">  //</span><span style="color:#C3E88D;"> Windows示例路径</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#C3E88D;"> /Library/Java/JavaVirtualMachines/jdk1.8.0_221.jdk/Contents/Home/bin</span><span style="color:#C3E88D;">  //</span><span style="color:#C3E88D;"> Mac示例路径</span></span></code></pre></div><h4 id="步骤四-生成签名证书" tabindex="-1">步骤四：生成签名证书 <a class="header-anchor" href="#步骤四-生成签名证书" aria-label="Permalink to &quot;步骤四：生成签名证书&quot;">​</a></h4><p>在终端或命令提示符中，使用以下命令生成签名证书（.keystore 文件）。根据你的需求和项目要求，可以根据需要修改命令中的参数。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">keytool</span><span style="color:#C3E88D;"> -genkey</span><span style="color:#C3E88D;"> -v</span><span style="color:#C3E88D;"> -keystore</span><span style="color:#C3E88D;"> my-release-key.keystore</span><span style="color:#C3E88D;"> -alias</span><span style="color:#C3E88D;"> my-release-key</span><span style="color:#C3E88D;"> -keyalg</span><span style="color:#C3E88D;"> RSA</span><span style="color:#C3E88D;"> -keysize</span><span style="color:#F78C6C;"> 2048</span><span style="color:#C3E88D;"> -validity</span><span style="color:#F78C6C;"> 10000</span></span></code></pre></div><ul><li><p><code>keytool</code>： Java 自带的工具，用于管理密钥和证书。</p></li><li><p><code>-genkey</code>： 表示生成一个新的密钥对。</p></li><li><p><code>-v</code>： 表示启用详细模式（verbose），会输出更多的详细信息。</p></li><li><p><code>-keystore my-release-key.keystore</code></p></li><li><p>指定生成的密钥库文件名为 my-release-key.keystore。 可以自行修改</p></li><li><p>这是一个存储私钥和公钥的文件。</p></li><li><p><code>-alias my-release-key</code>： 为密钥对指定一个别名，方便之后引用。</p></li><li><p><code>-keyalg RSA</code>：指定密钥的算法为 RSA（加密算法的一种）。</p></li><li><p><code>-keysize 2048</code>： 指定密钥的长度为 2048 位（确保足够的安全性）。</p></li><li><p><code>-validity 10000</code>： 指定证书的有效期为 10,000 天（约 27 年）。</p></li></ul><h4 id="步骤五-按照提示填写证书信息" tabindex="-1">步骤五：按照提示填写证书信息 <a class="header-anchor" href="#步骤五-按照提示填写证书信息" aria-label="Permalink to &quot;步骤五：按照提示填写证书信息&quot;">​</a></h4><p>生成签名证书的命令会提示你填写一些证书信息，如证书拥有者的姓名、组织单位名称、城市、州/省、国家等。根据实际情况填写这些信息。</p><h5 id="设置密钥库口令" tabindex="-1">设置密钥库口令 <a class="header-anchor" href="#设置密钥库口令" aria-label="Permalink to &quot;设置密钥库口令&quot;">​</a></h5><ol><li><p>密钥裤口令用于下一次命令行访问密钥是输入的口令</p><img src="`+h+'" alt="密钥库口令"></li><li><p>输入密钥口令后，点击回车，会依次出现诸如姓名、公司、组织等问题，按要求填写即可</p><img src="'+m+'" alt="密钥信息填写"></li><li><p>信息确认无误后，输入<code>y</code>确认并回车 之后会自动在当前文件的路径下(即jdk文件下的 <code>/Contents/Home/bin</code>)生成我们需要的签名证书; 应用打包时需要手动上传一份证书，建议复制一份到常用文件夹中</p></li></ol><h4 id="步骤六-设置密码" tabindex="-1">步骤六：设置密码 <a class="header-anchor" href="#步骤六-设置密码" aria-label="Permalink to &quot;步骤六：设置密码&quot;">​</a></h4><p>生成签名证书时，需要设置一个密码以保护证书的安全性。请记住这个密码，它将用于以后对应用进行签名和更新。</p><h4 id="步骤七-妥善保存证书文件" tabindex="-1">步骤七：妥善保存证书文件 <a class="header-anchor" href="#步骤七-妥善保存证书文件" aria-label="Permalink to &quot;步骤七：妥善保存证书文件&quot;">​</a></h4><p>确认生成的签名证书 生成签名证书后，会在当前目录下生成一个名为 my-release-key.keystore 的文件。请确保将这个文件妥善保存，并备份好。</p><p>生成签名证书后，你就可以使用它对你的 Android 应用进行签名了。在打包应用时，通过引用签名证书，可以验证应用的身份和完整性。</p><blockquote><p>请注意，签名证书是非常重要的，请妥善保管好它，并谨慎分享证书文件和相关密码，以免引发安全问题。</p></blockquote><h3 id="配置应用" tabindex="-1">配置应用 <a class="header-anchor" href="#配置应用" aria-label="Permalink to &quot;配置应用&quot;">​</a></h3><h4 id="配置应用基础信息" tabindex="-1">配置应用基础信息 <a class="header-anchor" href="#配置应用基础信息" aria-label="Permalink to &quot;配置应用基础信息&quot;">​</a></h4><p>在基础配置页签， 填写应用名称、应用描述、应用版本以及应用版本号等基本信息</p><img src="'+A+'" alt="UniApp基础配置"><blockquote><p>说明：</p><p>应用版本名称为一个字符串，例如：1.0.0，通常代表同一个应用不同的版本名称；</p><p>应用版本号是一个 number 类型的数字，通常从 1 开始依次累加，从根本上用来区别不同版本，主要用来版本更新覆盖等。</p></blockquote><h4 id="配置应用图标" tabindex="-1">配置应用图标 <a class="header-anchor" href="#配置应用图标" aria-label="Permalink to &quot;配置应用图标&quot;">​</a></h4><p>主要是用来配置应用在桌面上的图标显示， 这里需要配置不同分辨率的图标，主要是为了在不同屏幕分辨率的手机下避免失真效果</p><img src="'+E+'" alt="uni-app图标配置"><blockquote><p><strong>小技巧</strong></p><p>这里可以让 UI同学 出一张大分辨率尺寸的图片，利用 HBuilderX 工具一键生成所需要的各种不同分辨率的图片，如上图所示，自动生成图标功能，方便快捷。</p></blockquote><h4 id="配置应用模块" tabindex="-1">配置应用模块 <a class="header-anchor" href="#配置应用模块" aria-label="Permalink to &quot;配置应用模块&quot;">​</a></h4><p>应用模块主要会涉及到一些真机的能力，比如：使用照相机、蓝牙、相册、定位等功能，也可以配置一些 uniapp 已经支持的第三方插件配置，比如：第三方地图（高德、百度等）、第三方分享、友盟统计等。如下图所示进行按需选择。</p><img src="'+b+'" alt="uniapp应用模块配置"><p>目前在 uni-app 中所涉及的 Android 模块配置模块及三方 SDK 主要有以下几个，均可以在 HBuilderX 中进行选择配置</p><ul><li>Geolocation (定位)</li><li>Push (消息推送)</li><li>Share (分享)</li><li>Oauth (登录鉴权)</li><li>Map (地图)</li><li>Payment (支付)</li><li>Speech (语音输入)</li><li>Statistic (统计)</li><li>FacialRecognitionVerify (实人认证)</li><li>uni-AD</li><li>Android X5 Webview (腾讯 TBS)</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>不过需要注意的是，如果没有使用某一些模块功能，请不要勾选，因为你每选择一个模块，将会增大你的应用体积。切记要按需选择。</p></div><h4 id="配置应用权限" tabindex="-1">配置应用权限 <a class="header-anchor" href="#配置应用权限" aria-label="Permalink to &quot;配置应用权限&quot;">​</a></h4><p>在 App 权限一栏中，根据应用的需求，勾选对应的权限，通常有一些所必要的权限，下面我进行列举，其他的按照应用内所设计的权限进行添加即可。</p><ol><li><p><code>&lt;uses-feature android:name=&quot;android.hardware.camera&quot;/&gt;</code></p><p>指定了应用需要使用相机功能。用于在应用中拍摄照片、录制视频或进行其他与相机相关的操作。</p></li><li><p><code>&lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot;/&gt;</code></p><p>指定了应用需要使用相机的自动对焦功能。用于在应用中实现相机对焦功能，以确保拍摄的照片或视频清晰。</p></li><li><p><code>&lt;uses-permission:name=&quot;android.permission.CAMERA&quot;/&gt;</code></p><p>允许应用访问设备的相机。用于应用在运行时获取相机的访问权限，可以进行拍摄、录制等操作。</p></li><li><p><code>&lt;uses-permission android:name=&quot;android.permission.FLASHLIGHT&quot;/&gt;</code></p><p>允许应用控制设备的闪光灯。用于应用在需要时打开和关闭设备的闪光灯。</p></li><li><p><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code></p><p>允许应用访问互联网。用于应用在需要联网的功能中实现数据的传输和获取。</p></li><li><p><code>&lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;/&gt;</code></p><p>允许应用挂载和卸载文件系统。用于应用在需要读取和写入外部存储设备（如 SD 卡）时进行相关操作。</p></li><li><p><code>&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</code></p><p>允许应用向外部存储设备写入数据。用于应用在需要保存文件到外部存储设备时进行相关操作。</p></li><li><p><code>&lt;uses-permission android:name=&quot;android.permission.WRITE_SETTINGS&quot;/&gt;</code></p><p>允许应用修改系统设置。用于应用在需要修改设备设置（如音量、显示亮度等）时进行相关操作。</p></li></ol><p>这些权限在安卓应用开发中常见且常用，根据应用的实际需求，可以在清单文件（manifest.json）中声明和使用这些权限。确保应用以正确、安全的方式使用这些功能和资源，例如相机、闪光灯、互联网访问、外部存储等。</p><p>请注意，在 Android 6.0（API 级别 23）及以上版本，部分权限属于危险权限（Dangerous Permissions）。 用户在安装应用时需要授予这些权限，否则应用将无法正常使用对应的功能。在使用这些权限时，应遵循 Android 官方的权限管理原则。</p><h3 id="真机调试" tabindex="-1">真机调试 <a class="header-anchor" href="#真机调试" aria-label="Permalink to &quot;真机调试&quot;">​</a></h3><p>在打包引用之前，我们首先要经过真机测试，保证所要打包的代码在真机环境下运行没有问题，才可以启动打包程序，可以采用以下步骤进行连接安卓手机进行真机调试</p><ol><li>首先通过 USB 连接安卓手机，并打开开发者选项，允许 USB 调试开关打开</li><li>选择运行到 Android App 基座即可选择你在上一步连接电脑的安卓手机，确认运行就可以了</li></ol><blockquote><p>说明：如果在这个地方检测不到你的真机设备，说明手机和电脑通过 USB 未真正连接成功，</p><p>通常的解决方案是下载一个 360 手机助手、豌豆荚、应用宝等第三方应用，这些应用会安装一些必备的驱动，从侧面解决你的连接调试问题。</p></blockquote><img src="'+g+'" alt="运行到基座"><p>真机调试主要是测试你的代码运行情况，避免频繁使用云打包带来的延时、效率低下的问题。避免编写一行代码几秒钟，打包一次 5 分钟的尴尬境地，大幅度的降低了开发效率。</p><p><strong>真机运行常见问题</strong></p>',53)),l(i,{title:"HbuildX真机运行常见问题",href:"https://uniapp.dcloud.net.cn/tutorial/run/run-app-faq.html"}),a[14]||(a[14]=o("p",null,[e("在平常开发时， 我们也可以使用上面安装的"),o("code",null,"Android Studio"),e("软件作为模拟设备进行调试")],-1)),a[15]||(a[15]=o("p",null,[e("在"),o("code",null,"Android Studio"),e("上打开项目， 选择手机模拟器， 这样当运行到Android基座时， HBuilderX会检测到"),o("code",null,"Android Studio"),e("的基座 之后可以进行实时同步调试")],-1)),l(i,{title:"HBuilderX模拟器安装指南",href:"https://uniapp.dcloud.net.cn/tutorial/run/installSimulator.html#android"}),a[16]||(a[16]=t('<h3 id="云打包" tabindex="-1">云打包 <a class="header-anchor" href="#云打包" aria-label="Permalink to &quot;云打包&quot;">​</a></h3><h4 id="_1-发行" tabindex="-1">1. 发行 <a class="header-anchor" href="#_1-发行" aria-label="Permalink to &quot;1. 发行&quot;">​</a></h4><p>打开 HBuilderX 的工具栏点击工具栏参数界面的 <strong>“发行”</strong> 按钮，可以看到有如下的菜单提供选择，下面分别对 App 发行的选项进行说明：</p><img src="'+k+'" alt="云打包选项"><h5 id="原生-app-云打包" tabindex="-1">原生 App - 云打包 <a class="header-anchor" href="#原生-app-云打包" aria-label="Permalink to &quot;原生 App - 云打包&quot;">​</a></h5><p>这个功能是我们接下来要使用的重点功能，主要用来打包 App 的配置项，包括 Android 配置和 iOS 配置，接下来会进行详细的说明</p><h5 id="原生-app-查看云打包状态" tabindex="-1">原生 App - 查看云打包状态 <a class="header-anchor" href="#原生-app-查看云打包状态" aria-label="Permalink to &quot;原生 App - 查看云打包状态&quot;">​</a></h5><p>很简单，这个功能主要是用来发布云打包请求之后，查看目前所请求的云打包状态，是否打包成功，如下图展示</p><img src="'+q+'" alt="云打包状态"><h5 id="原生-app-本地打包" tabindex="-1">原生 App - 本地打包 <a class="header-anchor" href="#原生-app-本地打包" aria-label="Permalink to &quot;原生 App - 本地打包&quot;">​</a></h5><p>这个功能主要是生成本地打包 App 资源，然后配合 Android Studio 进行离线打包。</p><img src="'+y+'" alt="本地打包"><p>运行该指令，主要会将你的项目生成 一个 <strong>www</strong> 的文件夹，这是 App 离线 资源，主要包含以下内容。</p><img src="'+B+'" alt="www文件夹"><p>这种方式，如果想要深入了解的话，请参考以下链接：</p>',15)),l(i,{title:"App 离线打包",href:"https://nativesupport.dcloud.net.cn/AppDocs/usesdk/android.html"}),a[17]||(a[17]=t('<h5 id="原生-app-制作应用-wgt-包" tabindex="-1">原生 App - 制作应用 wgt 包 <a class="header-anchor" href="#原生-app-制作应用-wgt-包" aria-label="Permalink to &quot;原生 App - 制作应用 wgt 包&quot;">​</a></h5><p>这个功能其实很有用，其主要生成 H5 的资源包，主要用于应用热更新，解决频繁的整包更新。如果你的应用使用了热更新方案，那么这个你将会时常用到。</p><h4 id="_2-云打包" tabindex="-1">2. 云打包 <a class="header-anchor" href="#_2-云打包" aria-label="Permalink to &quot;2. 云打包&quot;">​</a></h4><p>点击 <code>“原生 App - 云打包”</code> 按钮，HBuilderX 将打开打包配置界面，主要填写好下面几个参数，即可实现云打包。主要填写的相关信息如下：</p><ul><li>Android 包名</li><li>证书的相关信息（上文中我们已经生成了相关证书） <ul><li>证书文件</li><li>证书别名</li><li>证书密码</li></ul></li><li>选择传统打包或快速安心打包 <ul><li>主要区别在于是否上传证书及代码</li></ul></li></ul><img src="'+f+'" alt="云打包状态"><h3 id="总结一些坑" tabindex="-1">总结一些坑 <a class="header-anchor" href="#总结一些坑" aria-label="Permalink to &quot;总结一些坑&quot;">​</a></h3><h4 id="上线-google-play-应用市场" tabindex="-1">上线 Google Play 应用市场 <a class="header-anchor" href="#上线-google-play-应用市场" aria-label="Permalink to &quot;上线 Google Play 应用市场&quot;">​</a></h4><ol><li>确保将 HBulider X 升级到 **3.2.15+**版本，否则 App 将会出现问题</li><li>App 提交云端打包时请勾选“<strong>GooglePlay(AAB)</strong>”渠道，生成<code>.aab</code> 格式的应用</li><li>不能直接下载 <code>apk</code> 方式安装应用，需引导用户到 <strong>Google Play</strong> 安装</li><li>不能存在动态加载代码行为</li><li>“App 常用其它设置”中需要将 <code>targetSdkVersion</code> 设置值大于等于 <strong>30</strong></li><li>务必在 <strong>Android11</strong> 设备上进行测试，确保应用所有功能可以正常运行</li><li>不能包含安装应用权限，在 App 权限配置中不要勾选 <code>android.permission.INSTALL_PACKAGES</code>、<code>android.permission.REQUEST_INSTALL_PACKAGES</code> 权限</li></ol><h4 id="应用市场隐私审核不通过" tabindex="-1">应用市场隐私审核不通过 <a class="header-anchor" href="#应用市场隐私审核不通过" aria-label="Permalink to &quot;应用市场隐私审核不通过&quot;">​</a></h4><p>目前不管是上架任何的应用市场，在首次安装应用或更新高版本的应用时，必须首要弹出应用隐私弹窗，用户进行阅读和同意，其次会检测应用获取的隐私条目和隐私政策是否匹配，不匹配也会被拒绝</p><h4 id="不要频繁的使用云打包" tabindex="-1">不要频繁的使用云打包 <a class="header-anchor" href="#不要频繁的使用云打包" aria-label="Permalink to &quot;不要频繁的使用云打包&quot;">​</a></h4><p>DCloud 官方为了节流，做了一些打包次数的限制，官方说明：打包不是为了测试应用，而是为了发布应用。所以频繁的打包超出一定限制后，当天会禁止你再次打包。</p><p>为了解决这个问题，你可以“制作自定义调试基座”，然后运行到手机，使用自定义基座运行调试，如下图所示：</p><img src="'+D+'" alt="制作自定义基座"><ul><li>搜索自定义基座</li></ul><img src="'+C+'" alt="选择自定义基座"><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2>',18)),l(i,{title:"超详细uni-app打包流程",href:"https://juejin.cn/post/7296317316206411787"})])}const R=r(P,[["render",S]]);export{j as __pageData,R as default};
